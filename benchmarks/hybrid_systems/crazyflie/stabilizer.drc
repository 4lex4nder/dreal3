//Quadcopter stabilizer

#define x 	7.5*10^(-3)
#define Iy 	7.5*10^(-3)
#define Iz 	1.3*10^(-2)
#define Jr  	6.5*10^(-5)
#define b 	3.13*10^(-5)
#define d	7.5*10^(-7)
#define l 	0.23
#define m 	0.65
#define g 	9.81          
#define dt 	0.01

#define	g1 	0
#define g2  	0
#define g3 	0
#define g4  	(l/Ix)*u22
#define g5 	(l/Iy*u32)
#define g6 	u42*(1/Iz)
#define g7 	0
#define g8 	0
#define g9 	0
#define g10 	((cos[phi]*sin[theta]*cos[psi]) + sin[phi]*sin[psi])*(u12/m)
#define g11 	((cos[phi]*sin[theta]*sin[psi]) - (sin[phi]*cos[psi]))*(u12/m)
#define g12 	((u12)/m)*cos[phi]*cos[theta]

#define Omega  		d*omegasqr5
#define omegasqr5  	-omegasqr1 + omegasqr2 - omegasqr3 + omegasqr4
#define omegasqr1 	(U1/(4*b)) + (U3/(2*b*l)) - (U4/(4*d))
#define omegasqr2 	(U1/(4*b)) - (U2/(2*b*l)) + (U4/(4*d))
#define omegasqr3 	(U1/(4*b)) - (U3/(2*b*l)) - (U4/(4*d))
#define omegasqr4 	(U1/(4*b)) + (U2/(2*b*l)) + (U4/(4*d))

#define u12 	(b)*(omegasqr1 + omegasqr2 + omegasqr3 + omegasqr4)
#define u22  	(b)*(-omegasqr2 + omegasqr4)
#define u32 	(b)*(omegasqr1 - omegasqr3)
#defein u42 	(d)*(-omegasqr1 + omegasqr2 -omegasqr3 + omegasqr4)


main()
{
	real	phi, theta, psi;
	real	d_phi, d_theta, d_psi;
//	real	dd_phi, dd_theta, dd_psi;

	real	x, y, z;
	real	d_x, d_y, d_z;
//	real	dd_x, dd_y, dd_z;

//	phi = 0; theta = 0; psi = 0;
//	d_phi = 0; d_theta = 0; d_psi=0;

//	x=0; y=0; z=0;
//	d_x=0; d_y=0; d_z=0;

	zero(phi, theta, psi, d_phi, d_theta, d_psi, x, y, z, d_x, d_y, d_z);

	proceed
	{
		d/dt[phi] 	= d_phi;
		d/dt[theta] 	= d_theta;
		d/dt[psi]	= d_psi;
		d/dt[d_phi]	= (((Iy - Iz)/Ix)*(d_theta)*(d_psi)) + (Jr/Ix * d_theta * Omega)+ g4 + 133.33*U2;
		d/dt[d_theta] 	= (((Iz - Ix)/Iy )*(d_phi)*(d_psi)) - ((Jr/Iy)*d_phi*Omega) + g5 + 133.33*U3;
		d/dt[d_psi]	= (((Ix - Iy)/Iz)*(d_phi)*(d_theta)) + g6 + 76.9231*U4;
		d/dt[x]		= d_x;
		d/dt[y]		= d_y;
		d/dt[z]		= d_z;
		d/dt[d_x]	= g10;
		d/dt[d_y]	= g11;
		d/dt[d_z]	= g - g12 - 1.53846*U1;
	}

	assert(x<1);

}




         

