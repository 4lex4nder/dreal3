//constant
#define 	pi		3.1415

#define		s		300.0

#define		cbar	11.32

#define		m		636.94

#define		J		55814.0

#define		g		32.17

#define		Tstart	1.9e4

#define		dTdV	-20.0

#define		xcgr	0.35

#define		xcg 	0.30

#define		rho		0.002377

#define		r2d		180 / 3.1416

#define		THTL	0.4

#define		dele1	-2.5

#define		dele2	-1.75

#define		T 		( (Tstart + Vt * dTdV) * THTL )

#define		sa		sin(alpha)

#define		ca		cos(alpha)

#define		st		sin(theta)

#define		ct		cos(theta)

#define		U		( Vt * ca )

#define		W		( Vt * sa )

#define		qbar	( 0.5 * Vt^2 * rho * (1 - 0.703e-5 * Y)^4.14 )



//mode

#define		dele1	-3.2

#define		dele2	-2.7



//CXQ1  (alpha <= 15)

#define 	temp_a	( (alpha *r2d + 15) / 17.36 )



#define		Pcxq1_1		0.03683

#define		Pcxq1_2		-0.04401

#define		Pcxq1_3		-0.2895

#define		Pcxq1_4		0.171

#define		Pcxq1_5		0.7588

#define		Pcxq1_6		0.02006

#define		Pcxq1_7		-0.4609

#define		Pcxq1_8		1.233

#define		Pcxq1_9		-0.6141



#define		cxq1		( Pcxq1_1*temp_a^8 + Pcxq1_2*temp_a^7 + Pcxq1_3*temp_a^6 + Pcxq1_4*temp_a^5 + Pcxq1_5*temp_a^4 + Pcxq1_6*temp_a^3 + Pcxq1_7*temp_a^2 + Pcxq1_8*temp_a + Pcxq1_9 )



//CXQ2  (alpha > 15)

#define		temp_b	( (alpha * r2d - 30) / 8.704 )



#define		Pcxq2_1		0.006577

#define		Pcxq2_2		0.05343

#define		Pcxq2_3		-0.01769

#define		Pcxq2_4		-0.2529

#define		Pcxq2_5		-0.06031

#define		Pcxq2_6		0.1057

#define		Pcxq2_7		0.175

#define		Pcxq2_8		0.7003

#define		Pcxq2_9		-0.5223

#define		Pcxq2_10	1.553



#define		cxq2		( Pcxq2_1*temp_b^9 + Pcxq2_2*temp_b^8 + Pcxq2_3*temp_b^7 + Pcxq2_4*temp_b^6 + Pcxq2_5*temp_b^5 + Pcxq2_6*temp_b^4 + Pcxq2_7*temp_b^3 + Pcxq2_8*temp_b^2 + Pcxq2_9*temp_b + Pcxq2_10 )



//CZQ1  (alpha <= -5)

#define		Pczq1_1		-3.4

#define		Pczq1_2		-42.8



#define		czq1		( Pczq1_1 * alpha *r2d + Pczq1_2 )



//CZQ2  (alpha > -5)

#define 	temp_c		( (alpha * r2d - 20) / 14.48 )



#define		Pczq2_1		-0.3902

#define		Pczq2_2		0.4469

#define		Pczq2_3		3.223

#define		Pczq2_4		-1.933

#define		Pczq2_5		-7.63

#define		Pczq2_6		3.033

#define		Pczq2_7		2.857

#define		Pczq2_8		-4.028

#define		Pczq2_9		2.22

#define		Pczq2_10	-28.57



#define		czq2		( Pczq2_1*temp_c^9 + Pczq2_2*temp_c^8 + Pczq2_3*temp_c^7 + Pczq2_4*temp_c^6 + Pczq2_5*temp_c^5 + Pczq2_6*temp_c^4 + Pczq2_7*temp_c^3 + Pczq2_8*temp_c^2 + Pczq2_9*temp_c + Pczq2_10 )



//CMQ1  (alpha <= -5)

#define		Pcmq1_1		1.334

#define		Pcmq1_2		6.13



#define		cmq1		( Pcmq1_1 * alpha *r2d + Pcmq1_2 )



//CMQ2  (alpha > -5)

#define		Pcmq2_1		0.1312

#define		Pcmq2_2		-0.2978

#define		Pcmq2_3		-0.5262

#define		Pcmq2_4		1.366

#define		Pcmq2_5		0.926

#define		Pcmq2_6		-2.289

#define		Pcmq2_7		-0.5049

#define		Pcmq2_8		0.7883

#define		Pcmq2_9		-6.046



#define		cmq2		( Pcmq2_1*temp_c^8 +  Pcmq2_2*temp_c^7 + Pcmq2_3*temp_c^6 + Pcmq2_4*temp_c^5 + Pcmq2_5*temp_c^4 + Pcmq2_6*temp_c^3 + Pcmq2_7*temp_c^2 + Pcmq2_8*temp_c + Pcmq2_9 )



//CX

#define		tx		( alpha * r2d / 26.01 )

#define		ty1		( dele1 / 14.72 )

#define		ty2		( dele2 / 14.72 )



#define		Pcx00	-0.006667

#define		Pcx10	0.09209

#define		Pcx01	0.00025

#define		Pcx20	0.07604

#define		Pcx11	0.02591

#define		Pcx02	0.03214

#define		Pcx30	-0.00304

#define		Pcx21	-0.008098

#define		Pcx12	0.007507

#define		Pcx03	-0.0002668

#define		Pcx40	-0.0207

#define		Pcx31	4.133e-05

#define		Pcx22	-0.00419

#define		Pcx13	0.002744

#define		Pcx04	0.003135

#define		Pcx50	-0.003713

#define		Pcx41	0.00246

#define		Pcx32	0.002783

#define		Pcx23	-0.0007745

#define		Pcx14	-0.001101

#define		Pcx05	0.0001502



#define		cx1		( Pcx00 + Pcx10*tx + Pcx01*ty1 + Pcx20*tx^2 + Pcx11*tx*ty1 + Pcx02*ty1^2 + Pcx30*tx^3 + Pcx21*tx^2*ty1 + Pcx12*tx*ty1^2 + Pcx03*ty1^3 + Pcx40*tx^4 + Pcx31*tx^3*ty1 + Pcx22*tx^2*ty1^2 + Pcx13*tx*ty1^3 + Pcx04*ty1^4 + Pcx50*tx^5 + Pcx41*tx^4*ty1 + Pcx32*tx^3*ty1^2 + Pcx23*tx^2*ty1^3 + Pcx14*tx*ty1^4 + Pcx05*ty1^5 )



#define		cx2		( Pcx00 + Pcx10*tx + Pcx01*ty2 + Pcx20*tx^2 + Pcx11*tx*ty2 + Pcx02*ty2^2 + Pcx30*tx^3 + Pcx21*tx^2*ty2 + Pcx12*tx*ty2^2 + Pcx03*ty2^3 + Pcx40*tx^4 + Pcx31*tx^3*ty2 + Pcx22*tx^2*ty2^2 + Pcx13*tx*ty2^3 + Pcx04*ty2^4 + Pcx50*tx^5 + Pcx41*tx^4*ty2 + Pcx32*tx^3*ty2^2 + Pcx23*tx^2*ty2^3 + Pcx14*tx*ty2^4 + Pcx05*ty2^5 )





//CM

#define		Pcm00	-0.02197

#define		Pcm10	0.06881

#define		Pcm01	-0.1448

#define		Pcm20	-0.03532

#define		Pcm11	0.02148

#define		Pcm02	0.0155

#define		Pcm30	-0.01013

#define		Pcm21	-0.05248

#define		Pcm12	-0.0148

#define		Pcm03	0.01086

#define		Pcm40	0.003807

#define		Pcm31	0.01617

#define		Pcm22	0.01134

#define		Pcm13	0.007071

#define		Pcm04	-0.003399

#define		Pcm50	0.002583

#define		Pcm41	0.01464

#define		Pcm32	-0.0004401

#define		Pcm23	-0.005702

#define		Pcm14	0.005451

#define		Pcm05	-0.0007439



#define		cm1		( Pcm00 + Pcm10*tx + Pcm01*ty1 + Pcm20*tx^2 + Pcm11*tx*ty1 + Pcm02*ty1^2 + Pcm30*tx^3 + Pcm21*tx^2*ty1 + Pcm12*tx*ty1^2 + Pcm03*ty1^3 + Pcm40*tx^4 + Pcm31*tx^3*ty1 + Pcm22*tx^2*ty1^2 + Pcm13*tx*ty1^3 + Pcm04*ty1^4 + Pcm50*tx^5 + Pcm41*tx^4*ty1 + Pcm32*tx^3*ty1^2 + Pcm23*tx^2*ty1^3 + Pcm14*tx*ty1^4 + Pcm05*ty1^5 )



#define		cm2		( Pcm00 + Pcm10*tx + Pcm01*ty2 + Pcm20*tx^2 + Pcm11*tx*ty2 + Pcm02*ty2^2 + Pcm30*tx^3 + Pcm21*tx^2*ty2 + Pcm12*tx*ty2^2 + Pcm03*ty2^3 + Pcm40*tx^4 + Pcm31*tx^3*ty2 + Pcm22*tx^2*ty2^2 + Pcm13*tx*ty2^3 + Pcm04*ty2^4 + Pcm50*tx^5 + Pcm41*tx^4*ty2 + Pcm32*tx^3*ty2^2 + Pcm23*tx^2*ty2^3 + Pcm14*tx*ty2^4 + Pcm05*ty2^5 )



//CZ

#define		temp_d	( alpha * r2d / 26.02 )

#define		Pcz1	-0.02485

#define		Pcz2	-0.02794

#define		Pcz3	0.1867

#define		Pcz4	0.1903

#define		Pcz5	-0.4622

#define		Pcz6	-0.3266

#define		Pcz7	0.7829

#define		Pcz8	-1.925

#define		Pcz9	-0.09799



#define		cz1		( Pcz1*temp_d^8 + Pcz2*temp_d^7 + Pcz3*temp_d^6 + Pcz4*temp_d^5 + Pcz5*temp_d^4 + Pcz6*temp_d^3 + Pcz7*temp_d^2 + Pcz8*temp_d + Pcz9 - 0.19*dele1/25 )



#define		cz2		( Pcz1*temp_d^8 + Pcz2*temp_d^7 + Pcz3*temp_d^6 + Pcz4*temp_d^5 + Pcz5*temp_d^4 + Pcz6*temp_d^3 + Pcz7*temp_d^2 + Pcz8*temp_d + Pcz9 - 0.19*dele2/25 )



//mode1_1 (alpha < -5)

#define		cx_tot1_1		( cx1 + (cbar / (2 * Vt)) * cxq1 * Q )

#define		cz_tot1_1		( cz1 + (cbar / (2 * Vt)) * czq1 * Q )

#define		cm_tot1_1		( cm1 + cz_tot1_1 * (xcgr - xcg) + (cbar / (2 * Vt)) * cmq1 * Q )

#define		U_dot1_1		( -Q * W - g * st + qbar * s * cx_tot1_1 / m + T / m )

#define		W_dot1_1		( Q * U + g * ct + qbar * s * cz_tot1_1 / m	 )



//mode1_2 (alpha >= -5 && alpha < 15)

#define		cx_tot1_2		( cx1 + (cbar / (2 * Vt)) * cxq1 * Q )

#define		cz_tot1_2		( cz1 + (cbar / (2 * Vt)) * czq2 * Q )

#define		cm_tot1_2		( cm1 + cz_tot1_2 * (xcgr - xcg) + (cbar / (2 * Vt)) * cmq2 * Q )

#define		U_dot1_2		( -Q * W - g * st + qbar * s * cx_tot1_2 / m + T / m )

#define		W_dot1_2		( Q * U + g * ct + qbar * s * cz_tot1_2 / m )



//mode1_3 (alpha >= 15)

#define		cx_tot1_3		( cx1 + (cbar / (2 * Vt)) * cxq2 * Q )

#define		cz_tot1_3		( cz1 + (cbar / (2 * Vt)) * czq2 * Q )

#define		cm_tot1_3		( cm1 + cz_tot1_3 * (xcgr - xcg) + (cbar / (2 * Vt)) * cmq2 * Q )

#define		U_dot1_3		( -Q * W - g * st + qbar * s * cx_tot1_3 / m + T / m )

#define		W_dot1_3		( Q * U + g * ct + qbar * s * cz_tot1_3 / m )



//mode2_1 (alpha < -5)

#define		cx_tot2_1		( cx2 + (cbar / (2 * Vt)) * cxq1 * Q )

#define		cz_tot2_1		( cz2 + (cbar / (2 * Vt)) * czq1 * Q )

#define		cm_tot2_1		( cm2 + cz_tot2_1 * (xcgr - xcg) + (cbar / (2 * Vt)) * cmq1 * Q )

#define		U_dot2_1		( -Q * W - g * st + qbar * s * cx_tot2_1 / m + T / m )

#define		W_dot2_1		( Q * U + g * ct + qbar * s * cz_tot2_1 / m )



//mode2_2 (alpha >= -5 && alpha < 15)

#define		cx_tot2_2		( cx2 + (cbar / (2 * Vt)) * cxq1 * Q )

#define		cz_tot2_2		( cz2 + (cbar / (2 * Vt)) * czq2 * Q )

#define		cm_tot2_2		( cm2 + cz_tot2_2 * (xcgr - xcg) + (cbar / (2 * Vt)) * cmq2 * Q )

#define		U_dot2_2		( -Q * W - g * st + qbar * s * cx_tot2_2 / m + T / m )

#define		W_dot2_2		( Q * U + g * ct + qbar * s * cz_tot2_2 / m )



//mode2_3 (alpha >= 15)

#define		cx_tot2_3		( cx2 + (cbar / (2 * Vt)) * cxq2 * Q )

#define		cz_tot2_3		( cz2 + (cbar / (2 * Vt)) * czq2 * Q )

#define		cm_tot2_3		( cm2 + cz_tot2_3 * (xcgr - xcg) + (cbar / (2 * Vt)) * cmq2 * Q )

#define		U_dot2_3		( -Q * W - g * st + qbar * s * Cx_tot2_3 / m + T / m )

#define		W_dot2_3		( Q * U + g * ct + qbar * s * Cz_tot2_3 / m )










[0, 500000]		X;
[0, 200000]		Y;
[0, 1000]		Vt;
[-3.14, 3.14]		alpha;
[-3.14, 3.14]		theta;
[-10, 10]		Q;

[0, 1000]		tau;

[0, 1000]		time;


//mode1_1 (alpha < -5)
{mode 1;

invt:           

flow:
				d/dt[X] = U * ct + W * st;
				d/dt[Y] = U * st - W * ct;
				d/dt[theta] = Q;
				d/dt[Q] = cm_tot1_1 * qbar * s * cbar / J;
				d/dt[Vt] =  (U * U_dot1_1 + W * W_dot1_1) * (1 / Vt);
				d/dt[alpha] = (U * W_dot1_1 - W * U_dot1_1) * (1 / Vt^2);

jump:
				(and (Y < 5000) (alpha * r2d >= -5) (alpha * r2d < 15))==> @2 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y < 5000) (alpha * r2d >= 15))==> @3 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y >= 5000) (alpha * r2d < -5))==> @4 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y >= 5000) (alpha * r2d >= -5) (alpha * r2d < 15))==> @5 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y >= 5000) (alpha * r2d >= 15))==> @6 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
}

//mode1_2 (alpha >= -5 && alpha < 15)
{mode 2;

invt:           

flow:
				d/dt[X] = U * ct + W * st;
				d/dt[Y] = U * st - W * ct;
				d/dt[theta] = Q;
				d/dt[Q] = cm_tot1_2 * qbar * s * cbar / J;
				d/dt[Vt] =  (U * U_dot1_2 + W * W_dot1_2)* (1/ Vt);
				d/dt[alpha] = (U * W_dot1_2 - W * U_dot1_2)* ( 1 / Vt^2);
				d/dt[tau] = 1;

jump:
				(and (Y < 5000) (alpha * r2d < -5))==> @1 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y < 5000) (alpha * r2d >= 15))==> @3 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y >= 5000) (alpha * r2d < -5))==> @4 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y >= 5000) (alpha * r2d >= -5) (alpha * r2d < 15))==> @5 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y >= 5000) (alpha * r2d >= 15))==> @6 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
}

//mode1_3 (alpha >= 15)
{mode 3;

invt:           

flow:
				d/dt[X] = U * ct + W * st;
				d/dt[Y] = U * st - W * ct;
				d/dt[theta] = Q;
				d/dt[Q] = cm_tot1_3 * qbar * s * cbar / J;
				d/dt[Vt] =  (U * U_dot1_3 + W * W_dot1_3) * ( 1/ Vt);
				d/dt[alpha] = (U * W_dot1_3 - W * U_dot1_3) * ( 1 / Vt^2);

jump:
				(and (Y < 5000) (alpha * r2d < -5))==> @1 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y < 5000) (alpha * r2d >= -5) (alpha * r2d < 15))==> @2 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y >= 5000) (alpha * r2d < -5))==> @4 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y >= 5000) (alpha * r2d >= -5) (alpha * r2d < 15))==> @5 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y >= 5000) (alpha * r2d >= 15))==> @6 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
}

//mode2_1 (alpha < -5)
{mode 4;

invt:           

flow:
				d/dt[X] = U * ct + W * st;
				d/dt[Y] = U * st - W * ct;
				d/dt[theta] = Q;
				d/dt[Q] = cm_tot2_1 * qbar * s * cbar / J;
				d/dt[Vt] =  (U * U_dot2_1 + W * W_dot2_1) * ( 1/ Vt);
				d/dt[alpha] = (U * W_dot2_1 - W * U_dot2_1) * ( 1/ Vt^2);

jump:
				(and (Y < 5000) (alpha * r2d < -5))==> @1 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y < 5000) (alpha * r2d >= -5) (alpha * r2d < 15))==> @2 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y < 5000) (alpha * r2d >= 15))==> @3 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y >= 5000) (alpha * r2d >= -5) (alpha * r2d < 15))==> @5 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y >= 5000) (alpha * r2d >= 15))==> @6 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
}

//mode2_2 (alpha >= -5 && alpha < 15)
{mode 5;

invt:           

flow:
				d/dt[X] = U * ct + W * st;
				d/dt[Y] = U * st - W * ct;
				d/dt[theta] = Q;
				d/dt[Q] = cm_tot2_2 * qbar * s * cbar / J;
				d/dt[Vt] =  (U * U_dot2_2 + W * W_dot2_2) * ( 1 / Vt);
				d/dt[alpha] = (U * W_dot2_2 - W * U_dot2_2) * ( 1/ Vt^2);

jump:
				(and (Y < 5000) (alpha * r2d < -5))==> @1 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y < 5000) (alpha * r2d >= -5) (alpha * r2d < 15))==> @2 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y < 5000) (alpha * r2d >= 15))==> @3 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y >= 5000) (alpha * r2d < -5))==> @4 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y >= 5000) (alpha * r2d >= 15))==> @6 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
}

//mode2_3 (alpha >= 15)
{mode 6;

invt:           

flow:
				d/dt[X] = U * ct + W * st;
				d/dt[Y] = U * st - W * ct;
				d/dt[theta] = Q;
				d/dt[Q] = cm_tot2_3 * qbar * s * cbar / J;
				d/dt[Vt] =  (U * U_dot2_3 + W * W_dot2_3) * ( 1/ Vt);
				d/dt[alpha] = (U * W_dot2_3 - W * U_dot2_3) * ( 1/ Vt^2);

jump:
				(and (Y < 5000) (alpha * r2d < -5))==> @1 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y < 5000) (alpha * r2d >= -5) (alpha * r2d < 15))==> @2 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y < 5000) (alpha * r2d >= 15))==> @3 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y >= 5000) (alpha * r2d < -5))==> @4 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
				(and (Y >= 5000) (alpha * r2d >= -5) (alpha * r2d < 15))==> @5 (and (Vt' = Vt) (alpha' = alpha) (theta'= theta) (Q' = Q) (X' = X) (Y' = Y));
}



init:	@2 (and (tau = 0) (Vt = 350) (alpha = 10 / 180 * pi) (theta = 10 / 180 * pi) (Q = 0) (X = 0) (Y = 0));

goal:   @2 (and (tau = 10) (Vt >= 0) (alpha >= 0) (theta >= -3) (Q >= -10) (X >= 0) (Y >= 0));
