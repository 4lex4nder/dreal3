//Longitudinal Vehicle Dynamics
//From R. Rajamani "Vehicle Dynamics and Control" Ch 4.

#define rou     1.225   //mass density of air

#define Cd	0.5
#define Vwind	0.0
#define m	1200.0	//mass of car

#define Cf	1.0	//coeffient for front tire force
#define Cr	1.0	//coeffient for rear tire force

#define g	9.8

#define theta	0.3

#define Af	1.6 + 0.00056 * (m - 765.0)
#define Faero   0.5 * rou * Cd * Af * ((v + Vwind) ^ 2.0)

#define r_eff	1.0

#define Fxf_b   (Cf * r_eff * omega_wf - v) / v                         //brake front tire force
#define Fxf_a   (Cf * r_eff * omega_wf - v) / (r_eff * omega_wf)	//acceleration front tire force

#define Fxr_b	(Cr * r_eff * omega_wr - v) / v                         //brake front tire force
#define Fxr_a   (Cr * r_eff * omega_wr - v) / (r_eff * omega_wr)	//acceleration front tire force

#define Rx_b	0.0	//rolling resistance, can be refined
#define Rx_a	0.0	//rolling resistance, can be refined

#define Iw	30.0

#define Twheel	100.0	//wheel torque, will refine

[0, 200]	x;
[0,  60]	v;
[-100, 100]	omega_wf;
[-100, 100]	omega_wr;
[0, 20]         time;

{
        mode 1; //brake mode

        invt:
                (x >= 0);
                (v >= 0);
                (omega_wf >= -100);
                (omega_wr >= -100);

        flow:
                d/dt[x] = v;
                d/dt[v] = (1.0 / m) * (Fxf_b + Fxr_b - Faero - Rx_b - (m * g * sin(theta) ));
                d/dt[omega_wf] = (1/Iw) * (Twheel - (r_eff * Fxf_b));
                d/dt[omega_wr] = (1/Iw) * (0 - (r_eff * Fxr_b));

        jump:
                (v < 10) ==> @2 (and (x' = x) (v' = v) (omega_wf' = omega_wf) (omega_wr' = omega_wr));

}

{
        mode 2; //acceleration mode

        invt:
                (x >= 0);
                (v >= 0);
                (omega_wf >= -100);
                (omega_wr >= -100);

        flow:
                d/dt[x] = v;
                d/dt[v] = (1.0 / m) * (Fxf_a + Fxr_a - Faero - Rx_a - m * g * sin(theta));
                d/dt[omega_wf] = (1 / Iw) * (Twheel - (r_eff * Fxf_a));
                d/dt[omega_wr] = (1 / Iw) * (0 - (r_eff * Fxr_a));
        jump:
                (v > 40) ==> @1 (and (x' = x) (v' = v) (omega_wf' = omega_wf) (omega_wr' = omega_wr));

}

init:
        @2 (and (v = 0) (x = 0) (omega_wf = 0) (omega_wr = 0) );

goal:
        @1 (and (v> 20) (x >= 0) (omega_wr >= -100) (omega_wf >= -100));
