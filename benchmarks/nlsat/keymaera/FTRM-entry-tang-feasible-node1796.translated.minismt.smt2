(set-logic QF_NRA)
(declare-fun d2 () Real)
(declare-fun d1 () Real)
(declare-fun r () Real)
(declare-fun x2 () Real)
(declare-fun x1 () Real)
(declare-fun tuscore0dollarsk_0 () Real)
(assert (= (+ (* r r) (* (- 1) (* d1 d1)) (* (- 1) (* d2 d2))) 0))
(assert (= (+ (* (- 3) (* r r)) (* x1 x1) (* x2 x2)) 0))
(assert (>= tuscore0dollarsk_0 0))
(assert (= (+ x1 (* d1 tuscore0dollarsk_0)) 0))
(assert (= (+ x2 (* d2 tuscore0dollarsk_0)) 0))
(assert (or (not (<= (+ (* (- 256) (* r r)) (* 64 (* d2 d2)) (* 64 (* x1 x1)) (* 128 (* d2 x1))) 0)) (and (or (not (>= (+ (* 256 (* d2 d2)) (* 256 (* x1 x1)) (* 512 (* d2 x1))) 0)) (not (>= (+ (* 65536 (* d2 d2 d2 d2)) (* 393216 (* d2 d2 x1 x1)) (* 262144 (* d2 d2 d2 x1)) (* 65536 (* x1 x1 x1 x1)) (* 262144 (* d2 x1 x1 x1))) 0))) (not (<= (+ (* 65536 (* d2 d2 d2 d2)) (* 393216 (* d2 d2 x1 x1)) (* 262144 (* d2 d2 d2 x1)) (* 65536 (* x1 x1 x1 x1)) (* 262144 (* d2 x1 x1 x1))) 0))) (not (>= (+ (* 8 d1) (* (- 8) x2)) 0)) (not (= (+ (* (- 256) (* r r)) (* 64 (* d1 d1)) (* 64 (* d2 d2)) (* 64 (* x1 x1)) (* 64 (* x2 x2)) (* 128 (* d2 x1)) (* (- 128) (* d1 x2))) 0)) (and (not (= (+ d2 x1) 0)) (>= (+ d2 x1) 0))))
(assert (or (not (>= (+ (* 8 d1) (* (- 8) x2)) 0)) (not (= (+ (* (- 256) (* r r)) (* 64 (* d1 d1)) (* 64 (* x2 x2)) (* (- 128) (* d1 x2))) 0)) (and (not (= (+ d2 x1) 0)) (>= (+ d2 x1) 0)) (not (= (+ (* 65536 (* d2 d2 d2 d2)) (* 393216 (* d2 d2 x1 x1)) (* 262144 (* d2 d2 d2 x1)) (* 65536 (* x1 x1 x1 x1)) (* 262144 (* d2 x1 x1 x1))) 0))))
(assert (or (not (<= (+ (* (- 16) (* r r)) (* 4 (* d1 d1)) (* 4 (* x2 x2)) (* (- 8) (* d1 x2))) 0)) (and (not (= (+ d2 x1) 0)) (>= (+ d2 x1) 0)) (not (= (+ (* (- 16) (* r r)) (* 4 (* d1 d1)) (* 4 (* d2 d2)) (* 4 (* x1 x1)) (* 4 (* x2 x2)) (* 8 (* d2 x1)) (* (- 8) (* d1 x2))) 0))))
(assert (or (not (<= (+ (* (- 256) (* r r)) (* 64 (* d2 d2)) (* 64 (* x1 x1)) (* 128 (* d2 x1))) 0)) (and (or (not (>= (+ (* 256 (* d2 d2)) (* 256 (* x1 x1)) (* 512 (* d2 x1))) 0)) (not (>= (+ (* 65536 (* d2 d2 d2 d2)) (* 393216 (* d2 d2 x1 x1)) (* 262144 (* d2 d2 d2 x1)) (* 65536 (* x1 x1 x1 x1)) (* 262144 (* d2 x1 x1 x1))) 0))) (not (<= (+ (* 65536 (* d2 d2 d2 d2)) (* 393216 (* d2 d2 x1 x1)) (* 262144 (* d2 d2 d2 x1)) (* 65536 (* x1 x1 x1 x1)) (* 262144 (* d2 x1 x1 x1))) 0))) (not (<= (+ (* 8 d1) (* (- 8) x2)) 0)) (not (= (+ (* (- 256) (* r r)) (* 64 (* d1 d1)) (* 64 (* d2 d2)) (* 64 (* x1 x1)) (* 64 (* x2 x2)) (* 128 (* d2 x1)) (* (- 128) (* d1 x2))) 0)) (and (not (= (+ d2 x1) 0)) (>= (+ d2 x1) 0))))
(assert (or (not (<= (+ (* 8 d1) (* (- 8) x2)) 0)) (not (= (+ (* (- 256) (* r r)) (* 64 (* d1 d1)) (* 64 (* x2 x2)) (* (- 128) (* d1 x2))) 0)) (and (not (= (+ d2 x1) 0)) (>= (+ d2 x1) 0)) (not (= (+ (* 65536 (* d2 d2 d2 d2)) (* 393216 (* d2 d2 x1 x1)) (* 262144 (* d2 d2 d2 x1)) (* 65536 (* x1 x1 x1 x1)) (* 262144 (* d2 x1 x1 x1))) 0))))
(assert (or (not (<= (+ (* (- 256) (* r r)) (* 64 (* d2 d2)) (* 64 (* x1 x1)) (* 128 (* d2 x1))) 0)) (and (or (not (>= (+ (* 256 (* d2 d2)) (* 256 (* x1 x1)) (* 512 (* d2 x1))) 0)) (not (>= (+ (* 65536 (* d2 d2 d2 d2)) (* 393216 (* d2 d2 x1 x1)) (* 262144 (* d2 d2 d2 x1)) (* 65536 (* x1 x1 x1 x1)) (* 262144 (* d2 x1 x1 x1))) 0))) (not (<= (+ (* 65536 (* d2 d2 d2 d2)) (* 393216 (* d2 d2 x1 x1)) (* 262144 (* d2 d2 d2 x1)) (* 65536 (* x1 x1 x1 x1)) (* 262144 (* d2 x1 x1 x1))) 0))) (not (>= (+ (* 8 d1) (* (- 8) x2)) 0)) (not (= (+ (* (- 256) (* r r)) (* 64 (* d1 d1)) (* 64 (* d2 d2)) (* 64 (* x1 x1)) (* 64 (* x2 x2)) (* 128 (* d2 x1)) (* (- 128) (* d1 x2))) 0)) (and (not (= (+ d2 x1) 0)) (<= (+ d2 x1) 0))))
(assert (or (not (<= (+ (* (- 16) (* r r)) (* 4 (* d1 d1)) (* 4 (* x2 x2)) (* (- 8) (* d1 x2))) 0)) (and (not (= (+ d2 x1) 0)) (<= (+ d2 x1) 0)) (not (= (+ (* (- 16) (* r r)) (* 4 (* d1 d1)) (* 4 (* d2 d2)) (* 4 (* x1 x1)) (* 4 (* x2 x2)) (* 8 (* d2 x1)) (* (- 8) (* d1 x2))) 0))))
(assert (or (not (>= (+ (* 8 d1) (* (- 8) x2)) 0)) (not (= (+ (* (- 256) (* r r)) (* 64 (* d1 d1)) (* 64 (* x2 x2)) (* (- 128) (* d1 x2))) 0)) (and (not (= (+ d2 x1) 0)) (<= (+ d2 x1) 0)) (not (= (+ (* 65536 (* d2 d2 d2 d2)) (* 393216 (* d2 d2 x1 x1)) (* 262144 (* d2 d2 d2 x1)) (* 65536 (* x1 x1 x1 x1)) (* 262144 (* d2 x1 x1 x1))) 0))))
(assert (or (not (<= (+ (* (- 256) (* r r)) (* 64 (* d2 d2)) (* 64 (* x1 x1)) (* 128 (* d2 x1))) 0)) (and (or (not (>= (+ (* 256 (* d2 d2)) (* 256 (* x1 x1)) (* 512 (* d2 x1))) 0)) (not (>= (+ (* 65536 (* d2 d2 d2 d2)) (* 393216 (* d2 d2 x1 x1)) (* 262144 (* d2 d2 d2 x1)) (* 65536 (* x1 x1 x1 x1)) (* 262144 (* d2 x1 x1 x1))) 0))) (not (<= (+ (* 65536 (* d2 d2 d2 d2)) (* 393216 (* d2 d2 x1 x1)) (* 262144 (* d2 d2 d2 x1)) (* 65536 (* x1 x1 x1 x1)) (* 262144 (* d2 x1 x1 x1))) 0))) (not (<= (+ (* 8 d1) (* (- 8) x2)) 0)) (not (= (+ (* (- 256) (* r r)) (* 64 (* d1 d1)) (* 64 (* d2 d2)) (* 64 (* x1 x1)) (* 64 (* x2 x2)) (* 128 (* d2 x1)) (* (- 128) (* d1 x2))) 0)) (and (not (= (+ d2 x1) 0)) (<= (+ d2 x1) 0))))
(assert (or (not (<= (+ (* 8 d1) (* (- 8) x2)) 0)) (not (= (+ (* (- 256) (* r r)) (* 64 (* d1 d1)) (* 64 (* x2 x2)) (* (- 128) (* d1 x2))) 0)) (and (not (= (+ d2 x1) 0)) (<= (+ d2 x1) 0)) (not (= (+ (* 65536 (* d2 d2 d2 d2)) (* 393216 (* d2 d2 x1 x1)) (* 262144 (* d2 d2 d2 x1)) (* 65536 (* x1 x1 x1 x1)) (* 262144 (* d2 x1 x1 x1))) 0))))
(assert (or (not (<= (+ (* (- 16) (* r r)) (* 4 (* d2 d2)) (* 4 (* x1 x1)) (* 8 (* d2 x1))) 0)) (not (<= (+ (* 2 d1) (* (- 2) x2)) 0)) (not (= (+ (* (- 16) (* r r)) (* 4 (* d1 d1)) (* 4 (* d2 d2)) (* 4 (* x1 x1)) (* 4 (* x2 x2)) (* 8 (* d2 x1)) (* (- 8) (* d1 x2))) 0))))
(assert (or (not (<= (+ (* (- 16) (* r r)) (* 4 (* d2 d2)) (* 4 (* x1 x1)) (* 8 (* d2 x1))) 0)) (not (>= (+ (* 2 d1) (* (- 2) x2)) 0)) (not (= (+ (* (- 16) (* r r)) (* 4 (* d1 d1)) (* 4 (* d2 d2)) (* 4 (* x1 x1)) (* 4 (* x2 x2)) (* 8 (* d2 x1)) (* (- 8) (* d1 x2))) 0))))
(assert (not (= (+ (* (- 4) (* r r)) (* d1 d1) (* d2 d2) (* x1 x1) (* x2 x2) (* 2 (* d2 x1)) (* (- 2) (* d1 x2))) 0)))
(check-sat)
