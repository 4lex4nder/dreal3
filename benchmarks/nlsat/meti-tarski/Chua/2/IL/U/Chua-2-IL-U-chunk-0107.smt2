(set-logic QF_NRA)

(declare-fun skoX () Real)
(declare-fun skoC () Real)
(declare-fun skoS () Real)
(assert (and (<= (* skoX (+ (/ (- 1003814387712.) 13.) (* skoX (+ (/ 8689268293632. 8125.) (* skoX (+ (/ (- 50144319111168.) 5078125.) (* skoX (+ (/ 213639773635008. 3173828125.) (* skoX (+ (/ (- 704502586867824.) 1983642578125.) (* skoX (+ (/ 117901443339775629. 79345703125000000.) (* skoX (+ (/ (- 7883134435718101539.) 1586914062500000000000.) (* skoX (+ (/ 13413716323405472490147. 1015625000000000000000000000.) (* skoX (+ (/ (- 278429930816320828199873.) 10156250000000000000000000000000.) (* skoX (+ (/ 2659485890900719634874649. 62500000000000000000000000000000000.) (* skoX (+ (/ (- 736677591779499338860277773.) 16250000000000000000000000000000000000000.) (* skoX (/ 204059692922921316864296943121. 7800000000000000000000000000000000000000000000.)))))))))))))))))))))))) (/ (- 35956124024832.) 13.)) (and (not (<= skoX 0.)) (and (= (* skoS skoS) (+ 1. (* skoC (* skoC (- 1.))))) (and (<= skoX 75.) (<= 0. skoX))))))
(set-info :status unsat)
(check-sat)
