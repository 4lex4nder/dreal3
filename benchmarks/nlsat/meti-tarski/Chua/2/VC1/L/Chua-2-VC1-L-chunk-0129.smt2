(set-logic QF_NRA)

(declare-fun skoX () Real)
(declare-fun skoS () Real)
(declare-fun skoC () Real)
(assert (and (<= (* skoX (+ (/ 855552. 6875.) (* skoX (+ (/ 2354568. 4296875.) (* skoX (+ (/ 3816458. 2685546875.) (* skoX (+ (/ 1084603219. 429687500000000.) (* skoX (+ (/ 3238639699. 1074218750000000000.) (* skoX (+ (/ 306292988017. 128906250000000000000000.) (* skoX (/ 4163763247. 3906250000000000000000000.)))))))))))))) (+ (+ (/ (- 113664.) 11.) (* skoC (/ (- 102400.) 11.))) (* skoS (/ 112896. 11.)))) (and (not (<= skoS (* skoC (/ 400. 441.)))) (and (not (<= (* skoX (+ (/ (- 64032.) 1375.) (* skoX (+ (/ (- 116058.) 859375.) (* skoX (+ (/ (- 560947.) 2148437500.) (* skoX (+ (/ (- 113872241.) 343750000000000.) (* skoX (+ (/ (- 471756427.) 1718750000000000000.) (* skoX (/ (- 13680936383.) 103125000000000000000000.)))))))))))) (+ (+ (/ 88320. 11.) (* skoC (/ 102400. 11.))) (* skoS (/ (- 112896.) 11.))))) (and (<= skoX 0.) (and (or (not (<= (* skoX (+ (+ (+ (/ (- 667.) 5500.) (* skoC (/ 116. 825.))) (* skoS (/ (- 4263.) 27500.))) (* skoX (+ (+ (/ (- 19343.) 165000000.) (* skoC (/ (- 841.) 6187500.))) (* skoS (/ 41209. 275000000.)))))) (+ (+ (/ 460. 11.) (* skoC (/ 1600. 33.))) (* skoS (/ (- 588.) 11.))))) (<= skoX 0.)) (and (<= (* skoC (/ 400. 441.)) skoS) (and (or (not (<= (* skoC (/ 400. 441.)) skoS)) (not (<= skoS (* skoC (/ 400. 441.))))) (and (= (* skoS skoS) (+ 1. (* skoC (* skoC (- 1.))))) (and (or (not (<= 0. skoX)) (or (not (<= skoX (/ 1570. 21.))) (<= 0. skoS))) (and (or (not (<= 0. skoX)) (or (not (<= skoX (/ 1570. 21.))) (<= 0. skoC))) (and (<= skoX 75.) (<= 0. skoX)))))))))))))
(set-info :status unsat)
(check-sat)

