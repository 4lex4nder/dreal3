(set-logic QF_NRA)
(declare-fun skoX () Real)
(declare-fun skoSM () Real)
(declare-fun skoSP () Real)
(declare-fun skoS2 () Real)
(assert (and (not (<= (+ (* 61 skoSM) (* (- 65) skoSP) (* (- 126) (* skoSP skoS2)) (* 126 (* skoSM skoS2))) 8)) (and (not (<= (+ (* (- 160) skoX) (* (- 61) skoSM) (* 65 skoSP) (* 126 (* skoSP skoS2)) (* (- 126) (* skoSM skoS2)) (* (- 40) (* skoX skoSM)) (* (- 40) (* skoX skoSP)) (* (- 8) (* skoX skoX)) (* 61 (* skoX skoX skoSM)) (* (- 65) (* skoX skoX skoSP)) (* 80 (* skoX skoX skoX)) (* (- 126) (* skoX skoX skoSP skoS2)) (* 126 (* skoX skoX skoSM skoS2)) (* 20 (* skoX skoX skoX skoSM)) (* 20 (* skoX skoX skoX skoSP))) (- 8))) (and (not (<= (+ (* 160 skoX) (* 61 skoSM) (* (- 65) skoSP) (* (- 126) (* skoSP skoS2)) (* 126 (* skoSM skoS2)) (* 40 (* skoX skoSM)) (* 40 (* skoX skoSP)) (* 8 (* skoX skoX)) (* (- 61) (* skoX skoX skoSM)) (* 65 (* skoX skoX skoSP)) (* 126 (* skoX skoX skoSP skoS2)) (* (- 126) (* skoX skoX skoSM skoS2))) 8)) (and (not (<= skoX 0)) (and (not (<= skoSP 0)) (and (not (<= skoSM 0)) (and (not (<= skoS2 0)) (not (<= (* (- 1) skoX) (- 1)))))))))))
(set-info :status unsat)
(check-sat)
