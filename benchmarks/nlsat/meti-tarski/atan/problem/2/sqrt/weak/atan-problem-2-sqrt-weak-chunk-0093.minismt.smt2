(set-logic QF_NRA)
(declare-fun skoT () Real)
(declare-fun skoB () Real)
(declare-fun skoA () Real)
(assert (and (not (<= (+ (* (- 100) (* skoB skoA)) (* 157 (* skoT skoB)) (* (- 100) (* skoT skoT)) (* 100 (* skoT skoT skoB))) 0)) (and (not (<= (+ (* (- 50) (* skoT skoT skoB skoA)) (* 50 (* skoT skoT skoB skoB)) (* 100 (* skoB skoB skoB skoA skoA skoA)) (* 100 (* skoT skoT skoB skoB skoA skoA)) (* 100 (* skoT skoT skoB skoA skoA skoA)) (* 100 (* skoT skoT skoB skoB skoB skoA)) (* 100 (* skoT skoT skoT skoT skoB skoA)) (* 100 (* skoT skoT skoT skoT skoB skoB)) (* (- 157) (* skoT skoB skoB skoB skoA skoA)) (* (- 157) (* skoT skoT skoT skoT skoT skoB)) (* (- 157) (* skoT skoT skoT skoB skoA skoA)) (* (- 157) (* skoT skoT skoT skoB skoB skoB)) (* 100 (* skoT skoT skoT skoT skoA skoA)) (* 100 (* skoT skoT skoT skoT skoT skoT)) (* (- 100) (* skoT skoT skoB skoB skoB skoA skoA)) (* (- 100) (* skoT skoT skoT skoT skoT skoT skoB)) (* (- 100) (* skoT skoT skoT skoT skoB skoA skoA)) (* (- 100) (* skoT skoT skoT skoT skoB skoB skoB)) (* 50 (* skoT skoT skoB skoB skoB skoB skoA skoA)) (* (- 50) (* skoT skoT skoB skoB skoB skoA skoA skoA)) (* 50 (* skoT skoT skoT skoT skoB skoB skoA skoA)) (* (- 50) (* skoT skoT skoT skoT skoB skoA skoA skoA)) (* (- 50) (* skoT skoT skoT skoT skoB skoB skoB skoA)) (* 50 (* skoT skoT skoT skoT skoB skoB skoB skoB)) (* (- 50) (* skoT skoT skoT skoT skoT skoT skoB skoA)) (* 50 (* skoT skoT skoT skoT skoT skoT skoB skoB))) 0)) (and (not (<= (* 2 skoT) 3)) (and (not (<= skoA 0)) (and (not (<= (* (- 1) skoB) (- 2))) (not (<= (+ skoB (* (- 1) skoA)) 0))))))))
(set-info :status sat)
(check-sat)
