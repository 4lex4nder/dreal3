(set-logic QF_NRA)
(declare-fun skoX () Real)
(declare-fun skoY () Real)
(declare-fun skoZ () Real)
(assert (and (<= (* (- 1) skoX) 0) (and (<= (+ (* 3 (* skoX skoX)) (* 4 (* skoX skoY)) (* 6 (* skoX skoZ)) (* 6 (* skoY skoZ)) (* 3 (* skoZ skoZ)) (* 3 (* skoY skoY)) (* skoX skoX skoY skoY) (* (- 6) (* skoX skoX skoY skoZ)) (* (- 6) (* skoX skoY skoY skoZ)) (* (- 6) (* skoX skoY skoZ skoZ)) (* 3 (* skoX skoX skoY skoY skoZ skoZ))) (- 1)) (and (not (<= (+ (* (- 200) skoX) (* (- 200) skoY) (* (- 150) skoZ) (* (- 237) (* skoX skoX)) (* (- 316) (* skoX skoY)) (* (- 474) (* skoX skoZ)) (* (- 474) (* skoY skoZ)) (* (- 237) (* skoZ skoZ)) (* (- 237) (* skoY skoY)) (* (- 200) (* skoX skoX skoY)) (* (- 200) (* skoX skoY skoY)) (* (- 300) (* skoX skoY skoZ)) (* (- 150) (* skoX skoX skoX)) (* (- 300) (* skoX skoX skoZ)) (* (- 150) (* skoX skoZ skoZ)) (* (- 150) (* skoY skoZ skoZ)) (* (- 300) (* skoY skoY skoZ)) (* (- 150) (* skoY skoY skoY)) (* (- 79) (* skoX skoX skoY skoY)) (* 474 (* skoX skoX skoY skoZ)) (* 474 (* skoX skoY skoY skoZ)) (* 474 (* skoX skoY skoZ skoZ)) (* 450 (* skoX skoX skoY skoY skoZ)) (* (- 50) (* skoX skoX skoY skoY skoY)) (* (- 50) (* skoX skoX skoX skoY skoY)) (* 300 (* skoX skoX skoY skoZ skoZ)) (* 300 (* skoX skoY skoY skoZ skoZ)) (* 300 (* skoX skoY skoY skoY skoZ)) (* 300 (* skoX skoX skoX skoY skoZ)) (* (- 237) (* skoX skoX skoY skoY skoZ skoZ)) (* (- 150) (* skoX skoX skoY skoY skoY skoZ skoZ)) (* (- 150) (* skoX skoX skoX skoY skoY skoZ skoZ))) 79)) (and (or (not (<= (+ (* (- 1) skoX) (* (- 1) skoY) (* (- 1) skoZ) (* skoX skoY skoZ)) 0)) (<= (* (- 1) skoY) 0)) (and (or (<= (* (- 1) skoY) 0) (<= (+ skoX skoY skoZ (* skoX skoY) (* (- 1) (* skoX skoY skoZ))) 1)) (and (or (not (<= (* (- 1) skoY) 0)) (or (<= (+ (* (- 1) skoX) (* (- 1) skoY) (* (- 1) skoZ) (* skoX skoY skoZ)) 0) (<= (+ (* 3 skoZ) (* 3 (* skoX skoX skoY)) (* 3 (* skoX skoY skoY)) (* (- 3) (* skoX skoY skoZ)) (* skoX skoX skoX) (* skoX skoX skoZ) (* skoX skoX skoX skoY skoY) (* (- 1) (* skoX skoX skoX skoY skoZ))) 0))) (and (not (<= skoZ 0)) (and (not (<= skoX (- 1))) (and (not (<= (* (- 1) skoY) (- 1))) (not (<= (+ (* (- 1) skoX) skoY) 0))))))))))))
(set-info :status unsat)
(check-sat)
