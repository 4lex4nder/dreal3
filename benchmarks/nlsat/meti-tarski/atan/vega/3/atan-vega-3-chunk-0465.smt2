(set-logic QF_NRA)

(declare-fun skoY () Real)
(declare-fun skoX () Real)
(declare-fun skoZ () Real)
(assert (and (<= (* skoZ (+ (+ (* skoX (- 18.)) (* skoY (+ (+ (- 18.) (* skoX (* skoX 18.))) (* skoY (+ (* skoX 12.) (* skoY (+ (+ (- 6.) (* skoX (* skoX 6.))) (* skoY (* skoX 6.))))))))) (* skoZ (+ (- 9.) (* skoY (+ (* skoX 18.) (* skoY (+ (+ (- 3.) (* skoX (* skoX (- 9.)))) (* skoY (+ (* skoX 6.) (* skoY (* skoX (* skoX (- 3.)))))))))))))) (+ (+ 3. (* skoX (* skoX 9.))) (* skoY (+ (* skoX 12.) (* skoY (+ (+ 10. (* skoX (* skoX 6.))) (* skoY (+ (* skoX 4.) (* skoY (+ 3. (* skoX skoX))))))))))) (and (<= (* skoZ (+ (+ (* skoX 18.) (* skoY (+ (+ 18. (* skoX (* skoX (- 18.)))) (* skoY (+ (* skoX (- 12.)) (* skoY (+ (+ 6. (* skoX (* skoX (- 6.)))) (* skoY (* skoX (- 6.)))))))))) (* skoZ (+ 9. (* skoY (+ (* skoX (- 18.)) (* skoY (+ (+ 3. (* skoX (* skoX 9.))) (* skoY (+ (* skoX (- 6.)) (* skoY (* skoX (* skoX 3.))))))))))))) (+ (+ (- 3.) (* skoX (* skoX (- 9.)))) (* skoY (+ (* skoX (- 12.)) (* skoY (+ (+ (- 10.) (* skoX (* skoX (- 6.)))) (* skoY (+ (* skoX (- 4.)) (* skoY (+ (- 3.) (* skoX (* skoX (- 1.))))))))))))) (and (<= (* skoZ (+ (+ (+ (- 9.) (* skoX (/ (- 711.) 25.))) (* skoY (+ (+ (/ (- 711.) 25.) (* skoX (* skoX (/ 711. 25.)))) (* skoY (+ (+ (- 21.) (* skoX (+ (/ 474. 25.) (* skoX 9.)))) (* skoY (+ (+ (/ (- 237.) 25.) (* skoX (+ 24. (* skoX (/ 237. 25.))))) (* skoY (* skoX (+ (/ 237. 25.) (* skoX (- 3.)))))))))))) (* skoZ (+ (/ (- 711.) 50.) (* skoY (+ (+ (- 9.) (* skoX (/ 711. 25.))) (* skoY (+ (+ (/ (- 237.) 50.) (* skoX (+ 18. (* skoX (/ (- 711.) 50.))))) (* skoY (+ (* skoX (+ (/ 237. 25.) (* skoX (- 9.)))) (* skoY (* skoX (* skoX (/ (- 237.) 50.)))))))))))))) (+ (+ (/ 237. 50.) (* skoX (+ 9. (* skoX (/ 711. 50.))))) (* skoY (+ (+ 12. (* skoX (/ 474. 25.))) (* skoY (+ (+ (/ 79. 5.) (* skoX (+ 6. (* skoX (/ 237. 25.))))) (* skoY (+ (+ 12. (* skoX (/ 158. 25.))) (* skoY (+ (/ 237. 50.) (* skoX (+ (- 3.) (* skoX (/ 79. 50.)))))))))))))) (and (not (<= 0. skoY)) (and (or (not (<= (* skoZ (+ (- 1.) (* skoY skoX))) (+ skoX skoY))) (<= 0. skoY)) (and (or (<= 0. skoY) (<= (* skoZ (+ 1. (* skoY (* skoX (- 1.))))) (+ (+ 1. (* skoX (- 1.))) (* skoY (+ (- 1.) (* skoX (- 1.))))))) (and (or (not (<= 0. skoY)) (or (<= (* skoZ (+ (- 1.) (* skoY skoX))) (+ skoX skoY)) (<= (* skoZ (+ (+ 3. (* skoX skoX)) (* skoY (* skoX (+ (- 3.) (* skoX (* skoX (- 1.)))))))) (+ (* skoX (* skoX (* skoX (- 1.)))) (* skoY (+ (* skoX (* skoX (- 3.))) (* skoY (* skoX (+ (- 3.) (* skoX (* skoX (- 1.)))))))))))) (and (not (<= skoZ 0.)) (and (not (<= skoX (- 1.))) (and (not (<= 1. skoY)) (not (<= skoY skoX)))))))))))))
(set-info :status unsat)
(check-sat)
