-- translated from ./meti-tarski/atan/vega/3/atan-vega-3-chunk-0473.smt2
DECL
    -- the variables
    float [-1000, 1000] x0, x1, x2;
EXPR
    -- the constraints to be solved
    (((-1 * x1) <= 0) and ((((-600 * x0) + (-600 * x1) + (-450 * x2) + (-790 * (x0 * x0)) + (-948 * (x0 * x1)) + (-711 * (x1 * x1)) + (-1422 * (x0 * x2)) + (-1422 * (x1 * x2)) + (-711 * (x2 * x2)) + (-600 * (x0 * x0 * x0)) + (-800 * (x0 * x0 * x1)) + (-600 * (x0 * x1 * x1)) + (-1050 * (x0 * x0 * x2)) + (-900 * (x0 * x1 * x2)) + (-900 * (x1 * x1 * x2)) + (-450 * (x0 * x2 * x2)) + (-450 * (x1 * x2 * x2)) + (-450 * (x1 * x1 * x1)) + (-237 * (x0 * x0 * x0 * x0)) + (-316 * (x0 * x0 * x0 * x1)) + (-474 * (x0 * x0 * x1 * x1)) + (948 * (x0 * x0 * x1 * x2)) + (1422 * (x0 * x1 * x1 * x2)) + (-474 * (x0 * x0 * x0 * x2)) + (-237 * (x0 * x0 * x2 * x2)) + (1422 * (x0 * x1 * x2 * x2)) + (-200 * (x0 * x0 * x0 * x1 * x1)) + (-300 * (x0 * x0 * x1 * x1 * x1)) + (900 * (x0 * x0 * x0 * x1 * x2)) + (1050 * (x0 * x0 * x1 * x1 * x2)) + (900 * (x0 * x1 * x1 * x1 * x2)) + (750 * (x0 * x0 * x1 * x2 * x2)) + (900 * (x0 * x1 * x1 * x2 * x2)) + (-79 * (x0 * x0 * x0 * x0 * x1 * x1)) + (474 * (x0 * x0 * x0 * x1 * x1 * x2)) + (474 * (x0 * x0 * x0 * x0 * x1 * x2)) + (474 * (x0 * x0 * x0 * x1 * x2 * x2)) + (-711 * (x0 * x0 * x1 * x1 * x2 * x2)) + (-50 * (x0 * x0 * x0 * x0 * x1 * x1 * x1)) + (150 * (x0 * x0 * x0 * x0 * x1 * x1 * x2)) + (300 * (x0 * x0 * x0 * x1 * x1 * x1 * x2)) + (-150 * (x0 * x0 * x0 * x1 * x1 * x2 * x2)) + (-450 * (x0 * x0 * x1 * x1 * x1 * x2 * x2)) + (-237 * (x0 * x0 * x0 * x0 * x1 * x1 * x2 * x2)) + (-150 * (x0 * x0 * x0 * x0 * x1 * x1 * x1 * x2 * x2))) <= 237) and (!((-1 * x0) <= 0) and (!(((3 * (x0 * x0)) + (4 * (x0 * x1)) + (3 * (x1 * x1)) + (6 * (x0 * x2)) + (6 * (x1 * x2)) + (3 * (x2 * x2)) + (x0 * x0 * x1 * x1) + (-6 * (x0 * x0 * x1 * x2)) + (-6 * (x0 * x1 * x1 * x2)) + (-6 * (x0 * x1 * x2 * x2)) + (3 * (x0 * x0 * x1 * x1 * x2 * x2))) <= -1) and ((!(((-1 * x0) + (-1 * x1) + (-1 * x2) + (x0 * x1 * x2)) <= 0) or ((-1 * x1) <= 0)) and ((((-1 * x1) <= 0) or ((x0 + x1 + x2 + (x0 * x1) + (-1 * (x0 * x1 * x2))) <= 1)) and ((!((-1 * x1) <= 0) or ((((-1 * x0) + (-1 * x1) + (-1 * x2) + (x0 * x1 * x2)) <= 0) or (((3 * x2) + (x0 * x0 * x0) + (3 * (x0 * x0 * x1)) + (3 * (x0 * x1 * x1)) + (x0 * x0 * x2) + (-3 * (x0 * x1 * x2)) + (x0 * x0 * x0 * x1 * x1) + (-1 * (x0 * x0 * x0 * x1 * x2))) <= 0))) and (!(x2 <= 0) and (!(x0 <= -1) and (!((-1 * x1) <= -1) and !(((-1 * x0) + x1) <= 0)))))))))));
