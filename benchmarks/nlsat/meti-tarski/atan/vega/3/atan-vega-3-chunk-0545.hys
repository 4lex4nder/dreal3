-- translated from ./meti-tarski/atan/vega/3/atan-vega-3-chunk-0545.smt2
DECL
    -- the variables
    float [-1000, 1000] x0, x1, x2;
EXPR
    -- the constraints to be solved
    ((((-63 * x0) + (-63 * x1) + (-63 * x2) + (-70 * (x0 * x0 * x1)) + (-70 * (x0 * x0 * x0)) + (63 * (x0 * x1 * x2)) + (-70 * (x0 * x0 * x2)) + (-15 * (x0 * x0 * x0 * x0 * x1)) + (70 * (x0 * x0 * x0 * x1 * x2)) + (-15 * (x0 * x0 * x0 * x0 * x2)) + (-15 * (x0 * x0 * x0 * x0 * x0)) + (15 * (x0 * x0 * x0 * x0 * x0 * x1 * x2))) <= 0) and ((((63 * x0) + (63 * x1) + (63 * x2) + (70 * (x0 * x0 * x1)) + (70 * (x0 * x0 * x0)) + (-63 * (x0 * x1 * x2)) + (70 * (x0 * x0 * x2)) + (15 * (x0 * x0 * x0 * x0 * x1)) + (-70 * (x0 * x0 * x0 * x1 * x2)) + (15 * (x0 * x0 * x0 * x0 * x2)) + (15 * (x0 * x0 * x0 * x0 * x0)) + (-15 * (x0 * x0 * x0 * x0 * x0 * x1 * x2))) <= 0) and ((((29673 * x0) + (29673 * x1) + (29673 * x2) + (-39900 * (x0 * x0)) + (-18900 * (x0 * x2)) + (32970 * (x0 * x0 * x1)) + (32970 * (x0 * x0 * x0)) + (-29673 * (x0 * x1 * x2)) + (32970 * (x0 * x0 * x2)) + (6300 * (x0 * x0 * x0 * x1)) + (-19200 * (x0 * x0 * x0 * x0)) + (18900 * (x0 * x0 * x1 * x2)) + (-14700 * (x0 * x0 * x0 * x2)) + (7065 * (x0 * x0 * x0 * x0 * x1)) + (-32970 * (x0 * x0 * x0 * x1 * x2)) + (7065 * (x0 * x0 * x0 * x0 * x2)) + (7065 * (x0 * x0 * x0 * x0 * x0)) + (3220 * (x0 * x0 * x0 * x0 * x0 * x1)) + (14700 * (x0 * x0 * x0 * x0 * x1 * x2)) + (-1280 * (x0 * x0 * x0 * x0 * x0 * x2)) + (-1280 * (x0 * x0 * x0 * x0 * x0 * x0)) + (-7065 * (x0 * x0 * x0 * x0 * x0 * x1 * x2)) + (1280 * (x0 * x0 * x0 * x0 * x0 * x0 * x1 * x2))) <= 18900) and (!((x0 + x1 + x2 + (-1 * (x0 * x1 * x2))) <= 0) and ((!(((-1 * x0) + (-1 * x1) + (-1 * x2) + (x0 * x1 * x2)) <= 0) or ((-1 * x0) <= 0)) and ((((-1 * x0) <= 0) or ((x0 + x1 + x2 + (x0 * x1) + (-1 * (x0 * x1 * x2))) <= 1)) and ((!((-1 * x0) <= 0) or ((((-1 * x0) + (-1 * x1) + (-1 * x2) + (x0 * x1 * x2)) <= 0) or (((3 * x2) + (3 * (x0 * x0 * x1)) + (-3 * (x0 * x1 * x2)) + (x1 * x1 * x1) + (x1 * x1 * x2) + (3 * (x0 * x1 * x1)) + (-1 * (x0 * x1 * x1 * x1 * x2)) + (x0 * x0 * x1 * x1 * x1)) <= 0))) and (!(x2 <= 0) and (!(x1 <= -1) and (!((-1 * x0) <= -1) and !((x0 + (-1 * x1)) <= 0)))))))))));
