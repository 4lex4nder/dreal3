(set-logic QF_NRA)
(declare-fun skoY () Real)
(declare-fun skoX () Real)
(declare-fun skoZ () Real)
(assert (and (<= (* (- 1) skoY) 0) (and (<= (+ (* (- 1) (* skoX skoX)) (* 4 (* skoY skoX)) (* (- 2) (* skoY skoZ)) (* (- 2) (* skoX skoZ)) (* (- 1) (* skoZ skoZ)) (* (- 1) (* skoY skoY)) (* (- 3) (* skoY skoY skoX skoX)) (* 2 (* skoY skoX skoX skoZ)) (* 2 (* skoY skoY skoX skoZ)) (* 2 (* skoY skoX skoZ skoZ)) (* (- 1) (* skoY skoY skoX skoX skoZ skoZ))) 3) (and (<= (+ (* skoX skoX) (* (- 4) (* skoY skoX)) (* 2 (* skoY skoZ)) (* 2 (* skoX skoZ)) (* skoZ skoZ) (* skoY skoY) (* 3 (* skoY skoY skoX skoX)) (* (- 2) (* skoY skoX skoX skoZ)) (* (- 2) (* skoY skoY skoX skoZ)) (* (- 2) (* skoY skoX skoZ skoZ)) (* skoY skoY skoX skoX skoZ skoZ)) (- 3)) (and (not (<= (+ (* (- 12) skoX) (* (- 12) skoZ) (* (- 1) (* skoX skoX)) (* 4 (* skoY skoX)) (* (- 2) (* skoY skoZ)) (* (- 2) (* skoX skoZ)) (* (- 1) (* skoZ skoZ)) (* (- 1) (* skoY skoY)) (* 16 (* skoY skoX skoX)) (* (- 4) (* skoY skoY skoX)) (* 32 (* skoY skoX skoZ)) (* 4 (* skoY skoZ skoZ)) (* 8 (* skoY skoY skoZ)) (* 4 (* skoY skoY skoY)) (* (- 3) (* skoY skoY skoX skoX)) (* 2 (* skoY skoX skoX skoZ)) (* 2 (* skoY skoY skoX skoZ)) (* 2 (* skoY skoX skoZ skoZ)) (* (- 20) (* skoY skoY skoX skoX skoZ)) (* 12 (* skoY skoY skoY skoX skoX)) (* (- 8) (* skoY skoY skoX skoZ skoZ)) (* (- 8) (* skoY skoY skoY skoX skoZ)) (* (- 1) (* skoY skoY skoX skoX skoZ skoZ)) (* 4 (* skoY skoY skoY skoX skoX skoZ skoZ))) 3)) (and (or (<= (* (- 1) skoY) 0) (<= (+ skoY skoX skoZ (* skoY skoX) (* (- 1) (* skoY skoX skoZ))) 1)) (and (or (not (<= (* (- 1) skoY) 0)) (<= (+ (* (- 1) skoY) (* (- 1) skoX) (* (- 1) skoZ) (* skoY skoX skoZ)) 0)) (and (not (<= skoZ 0)) (and (not (<= skoX (- 1))) (and (not (<= (* (- 1) skoY) (- 1))) (not (<= (+ skoY (* (- 1) skoX)) 0))))))))))))
(set-info :status unsat)
(check-sat)
