(set-logic QF_NRA)
(declare-fun skoX () Real)
(declare-fun skoY () Real)
(declare-fun skoZ () Real)
(assert (and (not (<= (* (- 1) skoX) 0)) (and (not (<= (* (- 1) (* skoX skoX)) 3)) (and (not (<= (+ (* 36 skoZ) (* 6 (* skoX skoX)) (* (- 12) (* skoX skoY)) (* 3 (* skoY skoY)) (* 6 (* skoX skoZ)) (* 6 (* skoY skoZ)) (* 3 (* skoZ skoZ)) (* (- 12) (* skoX skoX skoZ)) (* (- 120) (* skoX skoY skoZ)) (* (- 24) (* skoY skoY skoZ)) (* (- 12) (* skoX skoZ skoZ)) (* (- 12) (* skoY skoZ skoZ)) (* (- 12) (* skoY skoY skoY)) (* skoX skoX skoX skoX) (* (- 4) (* skoX skoX skoX skoY)) (* 10 (* skoX skoX skoY skoY)) (* (- 4) (* skoX skoX skoY skoZ)) (* (- 6) (* skoX skoY skoY skoZ)) (* 2 (* skoX skoX skoX skoZ)) (* skoX skoX skoZ skoZ) (* (- 6) (* skoX skoY skoZ skoZ)) (* (- 16) (* skoX skoX skoX skoX skoY)) (* (- 32) (* skoX skoX skoX skoY skoY)) (* (- 40) (* skoX skoX skoY skoY skoY)) (* (- 8) (* skoX skoX skoX skoY skoZ)) (* 76 (* skoX skoX skoY skoY skoZ)) (* 24 (* skoX skoY skoY skoY skoZ)) (* 20 (* skoX skoX skoY skoZ skoZ)) (* 24 (* skoX skoY skoY skoZ skoZ)) (* 3 (* skoX skoX skoX skoX skoY skoY)) (* (- 2) (* skoX skoX skoX skoY skoY skoZ)) (* (- 2) (* skoX skoX skoX skoX skoY skoZ)) (* (- 2) (* skoX skoX skoX skoY skoZ skoZ)) (* 3 (* skoX skoX skoY skoY skoZ skoZ)) (* (- 12) (* skoX skoX skoX skoX skoY skoY skoY)) (* 20 (* skoX skoX skoX skoX skoY skoY skoZ)) (* 8 (* skoX skoX skoX skoY skoY skoY skoZ)) (* (- 4) (* skoX skoX skoX skoY skoY skoZ skoZ)) (* (- 12) (* skoX skoX skoY skoY skoY skoZ skoZ)) (* skoX skoX skoX skoX skoY skoY skoZ skoZ) (* (- 4) (* skoX skoX skoX skoX skoY skoY skoY skoZ skoZ))) (- 9))) (and (not (<= skoZ 0)) (and (not (<= skoX (- 1))) (and (not (<= (* (- 1) skoY) (- 1))) (not (<= (+ (* (- 1) skoX) skoY) 0)))))))))
(set-info :status unsat)
(check-sat)
