(set-logic QF_NRA)

(declare-fun skoX () Real)
(declare-fun skoY () Real)
(declare-fun skoZ () Real)
(assert (and (= (* skoY (+ (* skoX (- 7.)) (* skoY (+ (* skoX (* skoX 21.)) (* skoY (+ (* skoX (* skoX (* skoX (- 35.)))) (* skoY (+ (* skoX (* skoX (* skoX (* skoX 35.)))) (* skoY (+ (* skoX (* skoX (* skoX (* skoX (* skoX (- 21.)))))) (* skoY (+ (* skoX (* skoX (* skoX (* skoX (* skoX (* skoX 7.)))))) (* skoY (* skoX (* skoX (* skoX (* skoX (* skoX (* skoX (* skoX (- 1.))))))))))))))))))))) (- 1.)) (and (not (= (* skoY (* skoX (- 1.))) (- 1.))) (and (not (= (* skoY (+ (* skoX (- 6.)) (* skoY (+ (* skoX (* skoX 15.)) (* skoY (+ (* skoX (* skoX (* skoX (- 20.)))) (* skoY (+ (* skoX (* skoX (* skoX (* skoX 15.)))) (* skoY (+ (* skoX (* skoX (* skoX (* skoX (* skoX (- 6.)))))) (* skoY (* skoX (* skoX (* skoX (* skoX (* skoX skoX)))))))))))))))) (- 1.))) (and (not (= (* skoY (+ (* skoX (- 5.)) (* skoY (+ (* skoX (* skoX 10.)) (* skoY (+ (* skoX (* skoX (* skoX (- 10.)))) (* skoY (+ (* skoX (* skoX (* skoX (* skoX 5.)))) (* skoY (* skoX (* skoX (* skoX (* skoX (* skoX (- 1.))))))))))))))) (- 1.))) (and (not (= (* skoY (+ (* skoX (- 4.)) (* skoY (+ (* skoX (* skoX 6.)) (* skoY (+ (* skoX (* skoX (* skoX (- 4.)))) (* skoY (* skoX (* skoX (* skoX skoX)))))))))) (- 1.))) (and (not (= (* skoY (+ (* skoX (- 3.)) (* skoY (+ (* skoX (* skoX 3.)) (* skoY (* skoX (* skoX (* skoX (- 1.))))))))) (- 1.))) (and (not (= (* skoY (+ (* skoX (- 2.)) (* skoY (* skoX skoX)))) (- 1.))) (and (not (<= 0. skoY)) (and (or (not (<= (* skoZ (+ (- 1.) (* skoY skoX))) (+ skoX skoY))) (<= 0. skoY)) (and (<= (* skoZ (+ 1. (* skoY (* skoX (- 1.))))) (+ (+ 1. (* skoX (- 1.))) (* skoY (+ (- 1.) (* skoX (- 1.)))))) (and (not (<= 0. skoX)) (and (or (not (<= 0. skoX)) (<= (* skoZ (+ 1. (* skoY (* skoX (- 1.))))) (+ (+ 1. (* skoX (- 1.))) (* skoY (+ (- 1.) (* skoX (- 1.))))))) (and (or (<= 0. skoY) (<= (* skoZ (+ 1. (* skoY (* skoX (- 1.))))) (+ (+ 1. (* skoX (- 1.))) (* skoY (+ (- 1.) (* skoX (- 1.))))))) (and (or (not (<= 0. skoY)) (<= (* skoZ (+ (- 1.) (* skoY skoX))) (+ skoX skoY))) (and (not (<= skoZ 0.)) (and (not (<= skoX (- 1.))) (and (not (<= 1. skoY)) (not (<= skoY skoX))))))))))))))))))))
(set-info :status unsat)
(check-sat)
