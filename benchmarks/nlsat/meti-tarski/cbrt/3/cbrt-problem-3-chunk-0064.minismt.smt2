(set-logic QF_NRA)
(declare-fun skoY () Real)
(declare-fun skoZ () Real)
(declare-fun skoX () Real)
(assert (and (<= (+ (* (- 69) skoY) (* (- 69) skoZ) (* (- 5) skoX) (* (- 10) (* skoY skoY)) (* (- 10) (* skoY skoX)) (* (- 148) (* skoY skoZ)) (* (- 10) (* skoZ skoZ)) (* (- 10) (* skoZ skoX)) (* (- 20) (* skoY skoY skoZ)) (* (- 20) (* skoY skoZ skoX)) (* (- 20) (* skoY skoZ skoZ))) 32) (and (<= (+ (* 176 skoY) (* 176 skoZ) (* (- 80) skoX) (* (- 71) (* skoY skoY)) (* (- 72) (* skoY skoX)) (* 1522 (* skoY skoZ)) (* (- 71) (* skoZ skoZ)) (* (- 72) (* skoZ skoX)) (* (- 1) (* skoX skoX)) (* 34 (* skoY skoY skoZ)) (* 32 (* skoY skoZ skoX)) (* 34 (* skoY skoZ skoZ)) (* (- 2) (* skoY skoY skoY)) (* (- 4) (* skoY skoY skoX)) (* (- 2) (* skoY skoX skoX)) (* (- 2) (* skoZ skoZ skoZ)) (* (- 4) (* skoZ skoZ skoX)) (* (- 2) (* skoZ skoX skoX)) (* (- 8) (* skoY skoY skoZ skoZ)) (* (- 8) (* skoY skoZ skoZ skoX)) (* (- 4) (* skoY skoZ skoZ skoZ)) (* (- 4) (* skoY skoY skoY skoZ)) (* (- 8) (* skoY skoY skoZ skoX)) (* (- 4) (* skoY skoZ skoX skoX))) 160) (and (<= (+ (* 69 skoY) (* 69 skoZ) (* 5 skoX) (* 10 (* skoY skoY)) (* 10 (* skoY skoX)) (* 148 (* skoY skoZ)) (* 10 (* skoZ skoZ)) (* 10 (* skoZ skoX)) (* 20 (* skoY skoY skoZ)) (* 20 (* skoY skoZ skoX)) (* 20 (* skoY skoZ skoZ))) (- 32)) (and (<= (+ (* (- 1) skoY) (* (- 1) skoZ) (* (- 1) skoX)) (- 1)) (and (not (<= skoZ 0)) (and (not (<= skoY 0)) (not (<= skoX 0)))))))))
(set-info :status unsat)
(check-sat)
