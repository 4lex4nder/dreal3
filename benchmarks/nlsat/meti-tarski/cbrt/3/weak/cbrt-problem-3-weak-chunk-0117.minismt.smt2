(set-logic QF_NRA)
(declare-fun skoY () Real)
(declare-fun skoZ () Real)
(declare-fun skoX () Real)
(assert (and (not (<= (+ (* (- 6) skoY) (* (- 6) skoZ) (* (- 6) skoX) (* (- 3) (* skoX skoX)) (* (- 130) (* skoY skoX)) (* (- 3) (* skoY skoY)) (* (- 130) (* skoY skoZ)) (* (- 130) (* skoZ skoX)) (* (- 3) (* skoZ skoZ)) (* 4 (* skoX skoX skoX)) (* (- 88) (* skoY skoX skoX)) (* (- 88) (* skoY skoY skoX)) (* 4 (* skoY skoY skoY)) (* (- 668) (* skoY skoZ skoX)) (* (- 88) (* skoZ skoX skoX)) (* (- 88) (* skoY skoY skoZ)) (* (- 88) (* skoY skoZ skoZ)) (* (- 88) (* skoZ skoZ skoX)) (* 4 (* skoZ skoZ skoZ)) (* 8 (* skoY skoX skoX skoX)) (* 16 (* skoY skoY skoX skoX)) (* 8 (* skoY skoY skoY skoX)) (* (- 340) (* skoY skoZ skoX skoX)) (* (- 340) (* skoY skoY skoZ skoX)) (* (- 340) (* skoY skoZ skoZ skoX)) (* 8 (* skoZ skoX skoX skoX)) (* 8 (* skoY skoY skoY skoZ)) (* 16 (* skoZ skoZ skoX skoX)) (* 16 (* skoY skoY skoZ skoZ)) (* 8 (* skoY skoZ skoZ skoZ)) (* 8 (* skoZ skoZ skoZ skoX)) (* 16 (* skoY skoZ skoX skoX skoX)) (* 32 (* skoY skoY skoZ skoX skoX)) (* 16 (* skoY skoY skoY skoZ skoX)) (* 32 (* skoY skoZ skoZ skoX skoX)) (* 32 (* skoY skoY skoZ skoZ skoX)) (* 16 (* skoY skoZ skoZ skoZ skoX))) (- 5))) (and (not (<= (+ (* 13 skoY) (* 13 skoZ) (* 5 skoX) (* 10 (* skoY skoX)) (* 10 (* skoY skoY)) (* 36 (* skoY skoZ)) (* 10 (* skoZ skoX)) (* 10 (* skoZ skoZ)) (* 20 (* skoY skoZ skoX)) (* 20 (* skoY skoY skoZ)) (* 20 (* skoY skoZ skoZ))) (- 4))) (and (not (<= (* 20 skoZ) 1)) (and (not (<= (* 20 skoY) 1)) (and (not (<= (* 20 skoX) 1)) (and (not (<= (* (- 1) skoZ) (- 15))) (and (not (<= (* (- 1) skoY) (- 15))) (not (<= (* (- 1) skoX) (- 15)))))))))))
(set-info :status sat)
(check-sat)
