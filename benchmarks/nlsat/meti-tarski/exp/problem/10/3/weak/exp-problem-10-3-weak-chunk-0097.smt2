(set-logic QF_NRA)

(declare-fun skoCM1 () Real)
(declare-fun skoC () Real)
(declare-fun skoX () Real)
(assert (and (not (<= (* skoC (+ (- 6.) (* skoC 12.))) (- 1.))) (and (not (<= (* skoCM1 (+ (+ (/ (- 1.) 550998028800.) (* skoC (+ (/ 1. 91833004800.) (* skoC (/ (- 1.) 45916502400.))))) (* skoCM1 (+ (+ (/ (- 1.) 20407334400.) (* skoC (+ (/ 1. 3401222400.) (* skoC (/ (- 1.) 1700611200.))))) (* skoCM1 (+ (+ (/ (- 181.) 183666009600.) (* skoC (+ (/ 181. 30611001600.) (* skoC (/ (- 181.) 15305500800.))))) (* skoCM1 (+ (+ (/ (- 1.) 62985600.) (* skoC (+ (/ 1. 10497600.) (* skoC (/ (- 1.) 5248800.))))) (* skoCM1 (+ (+ (/ (- 361.) 1700611200.) (* skoC (+ (/ 361. 283435200.) (* skoC (/ (- 361.) 141717600.))))) (* skoCM1 (+ (+ (/ (- 409.) 170061120.) (* skoC (+ (/ 409. 28343520.) (* skoC (/ (- 409.) 14171760.))))) (* skoCM1 (+ (+ (/ (- 49.) 2099520.) (* skoC (+ (/ 49. 349920.) (* skoC (/ (- 49.) 174960.))))) (* skoCM1 (+ (+ (/ (- 17.) 87480.) (* skoC (+ (/ 17. 14580.) (* skoC (/ (- 17.) 7290.))))) (* skoCM1 (+ (+ (/ (- 121.) 87480.) (* skoC (+ (/ 121. 14580.) (* skoC (/ (- 121.) 7290.))))) (* skoCM1 (+ (+ (/ (- 1.) 120.) (* skoC (+ (/ 1. 20.) (* skoC (/ (- 1.) 10.))))) (* skoCM1 (+ (+ (/ (- 1.) 24.) (* skoC (+ (/ 1. 4.) (* skoC (/ (- 1.) 2.))))) (* skoCM1 (+ (+ (/ (- 1.) 6.) (* skoC (+ 1. (* skoC (- 2.))))) (* skoCM1 (+ (+ (/ (- 1.) 2.) (* skoC (+ 3. (* skoC (- 6.))))) (* skoCM1 (+ (+ (- 1.) (* skoC (+ 6. (* skoC (- 12.))))) (* skoCM1 (* skoC 12.)))))))))))))))))))))))))))))) (+ (/ 1. 24794911296000.) (* skoC (+ (/ (- 1.) 4132485216000.) (* skoC (/ 1. 2066242608000.))))))) (and (= (+ 1. (* skoCM1 (* skoCM1 skoCM1))) skoX) (and (= (* skoC (* skoC skoC)) skoX) (and (not (<= skoX 1.)) (and (not (<= skoCM1 0.)) (not (<= skoC 0.)))))))))
(set-info :status unsat)
(check-sat)
