(set-logic QF_NRA)

(declare-fun skoY () Real)
(declare-fun skoX () Real)
(declare-fun skoZ () Real)
(assert (not (<= (* skoZ (+ (+ (+ 288. (* skoX (+ (- 288.) (* skoX (+ 144. (* skoX (+ (- 42.) (* skoX (+ (/ 15. 2.) (* skoX (/ (- 3.) 4.))))))))))) (* skoY (+ (+ (- 288.) (* skoX (+ 288. (* skoX (+ (- 126.) (* skoX (+ 30. (* skoX (/ (- 15.) 4.))))))))) (* skoY (+ (+ 144. (* skoX (+ (- 126.) (* skoX (+ 45. (* skoX (/ (- 15.) 2.))))))) (* skoY (+ (+ (- 42.) (* skoX (+ 30. (* skoX (/ (- 15.) 2.))))) (* skoY (+ (+ (/ 15. 2.) (* skoX (/ (- 15.) 4.))) (* skoY (/ (- 3.) 4.))))))))))) (* skoZ (+ (+ (+ (- 144.) (* skoX (+ 144. (* skoX (+ (- 63.) (* skoX (+ 15. (* skoX (/ (- 15.) 8.))))))))) (* skoY (+ (+ 144. (* skoX (+ (- 126.) (* skoX (+ 45. (* skoX (/ (- 15.) 2.))))))) (* skoY (+ (+ (- 63.) (* skoX (+ 45. (* skoX (/ (- 45.) 4.))))) (* skoY (+ (+ 15. (* skoX (/ (- 15.) 2.))) (* skoY (/ (- 15.) 8.))))))))) (* skoZ (+ (+ (+ 48. (* skoX (+ (- 42.) (* skoX (+ 15. (* skoX (/ (- 5.) 2.))))))) (* skoY (+ (+ (- 42.) (* skoX (+ 30. (* skoX (/ (- 15.) 2.))))) (* skoY (+ (+ 15. (* skoX (/ (- 15.) 2.))) (* skoY (/ (- 5.) 2.))))))) (* skoZ (+ (+ (+ (/ (- 21.) 2.) (* skoX (+ (/ 15. 2.) (* skoX (/ (- 15.) 8.))))) (* skoY (+ (+ (/ 15. 2.) (* skoX (/ (- 15.) 4.))) (* skoY (/ (- 15.) 8.))))) (* skoZ (+ (+ (+ (/ 3. 2.) (* skoX (/ (- 3.) 4.))) (* skoY (/ (- 3.) 4.))) (* skoZ (/ (- 1.) 8.)))))))))))) (+ (+ (- 2016.) (* skoX (+ (- 288.) (* skoX (+ 144. (* skoX (+ (- 48.) (* skoX (+ (/ 21. 2.) (* skoX (+ (/ (- 3.) 2.) (* skoX (/ 1. 8.))))))))))))) (* skoY (+ (+ (- 288.) (* skoX (+ 288. (* skoX (+ (- 144.) (* skoX (+ 42. (* skoX (+ (/ (- 15.) 2.) (* skoX (/ 3. 4.))))))))))) (* skoY (+ (+ 144. (* skoX (+ (- 144.) (* skoX (+ 63. (* skoX (+ (- 15.) (* skoX (/ 15. 8.))))))))) (* skoY (+ (+ (- 48.) (* skoX (+ 42. (* skoX (+ (- 15.) (* skoX (/ 5. 2.))))))) (* skoY (+ (+ (/ 21. 2.) (* skoX (+ (/ (- 15.) 2.) (* skoX (/ 15. 8.))))) (* skoY (+ (+ (/ (- 3.) 2.) (* skoX (/ 3. 4.))) (* skoY (/ 1. 8.))))))))))))))))
(set-info :status sat)
(check-sat)
