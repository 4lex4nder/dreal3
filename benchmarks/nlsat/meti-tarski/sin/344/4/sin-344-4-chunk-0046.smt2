(set-logic QF_NRA)

(declare-fun skoY () Real)
(declare-fun skoX () Real)
(declare-fun skoW () Real)
(declare-fun skoZ () Real)
(assert (and (not (<= (* skoZ (+ (+ (+ (+ (- 1.) (* skoW (* skoW (+ (/ 1. 2.) (* skoW (* skoW (/ (- 1.) 24.))))))) (* skoX (+ (* skoW (+ 1. (* skoW (* skoW (/ (- 1.) 6.))))) (* skoX (+ (+ (/ 1. 2.) (* skoW (* skoW (/ (- 1.) 4.)))) (* skoX (+ (* skoW (/ (- 1.) 6.)) (* skoX (/ (- 1.) 24.))))))))) (* skoY (+ (+ (* skoW (+ 1. (* skoW (* skoW (/ (- 1.) 6.))))) (* skoX (+ (+ 1. (* skoW (* skoW (/ (- 1.) 2.)))) (* skoX (+ (* skoW (/ (- 1.) 2.)) (* skoX (/ (- 1.) 6.))))))) (* skoY (+ (+ (+ (/ 1. 2.) (* skoW (* skoW (/ (- 1.) 4.)))) (* skoX (+ (* skoW (/ (- 1.) 2.)) (* skoX (/ (- 1.) 4.))))) (* skoY (+ (+ (* skoW (/ (- 1.) 6.)) (* skoX (/ (- 1.) 6.))) (* skoY (/ (- 1.) 24.))))))))) (* skoZ (+ (+ (+ (* skoW (+ (/ 1. 2.) (* skoW (* skoW (/ (- 1.) 12.))))) (* skoX (+ (+ (/ 1. 2.) (* skoW (* skoW (/ (- 1.) 4.)))) (* skoX (+ (* skoW (/ (- 1.) 4.)) (* skoX (/ (- 1.) 12.))))))) (* skoY (+ (+ (+ (/ 1. 2.) (* skoW (* skoW (/ (- 1.) 4.)))) (* skoX (+ (* skoW (/ (- 1.) 2.)) (* skoX (/ (- 1.) 4.))))) (* skoY (+ (+ (* skoW (/ (- 1.) 4.)) (* skoX (/ (- 1.) 4.))) (* skoY (/ (- 1.) 12.))))))) (* skoZ (+ (+ (+ (+ (/ 1. 6.) (* skoW (* skoW (/ (- 1.) 12.)))) (* skoX (+ (* skoW (/ (- 1.) 6.)) (* skoX (/ (- 1.) 12.))))) (* skoY (+ (+ (* skoW (/ (- 1.) 6.)) (* skoX (/ (- 1.) 6.))) (* skoY (/ (- 1.) 12.))))) (* skoZ (+ (+ (+ (* skoW (/ (- 1.) 24.)) (* skoX (/ (- 1.) 24.))) (* skoY (/ (- 1.) 24.))) (* skoZ (/ (- 1.) 120.)))))))))) (+ (+ (* skoW (+ 1. (* skoW (* skoW (+ (/ (- 1.) 6.) (* skoW (* skoW (/ 1. 120.)))))))) (* skoX (+ (+ 1. (* skoW (* skoW (+ (/ (- 1.) 2.) (* skoW (* skoW (/ 1. 24.))))))) (* skoX (+ (* skoW (+ (/ (- 1.) 2.) (* skoW (* skoW (/ 1. 12.))))) (* skoX (+ (+ (/ (- 1.) 6.) (* skoW (* skoW (/ 1. 12.)))) (* skoX (+ (* skoW (/ 1. 24.)) (* skoX (/ 1. 120.))))))))))) (* skoY (+ (+ (+ 1. (* skoW (* skoW (+ (/ (- 1.) 2.) (* skoW (* skoW (/ 1. 24.))))))) (* skoX (+ (* skoW (+ (- 1.) (* skoW (* skoW (/ 1. 6.))))) (* skoX (+ (+ (/ (- 1.) 2.) (* skoW (* skoW (/ 1. 4.)))) (* skoX (+ (* skoW (/ 1. 6.)) (* skoX (/ 1. 24.))))))))) (* skoY (+ (+ (* skoW (+ (/ (- 1.) 2.) (* skoW (* skoW (/ 1. 12.))))) (* skoX (+ (+ (/ (- 1.) 2.) (* skoW (* skoW (/ 1. 4.)))) (* skoX (+ (* skoW (/ 1. 4.)) (* skoX (/ 1. 12.))))))) (* skoY (+ (+ (+ (/ (- 1.) 6.) (* skoW (* skoW (/ 1. 12.)))) (* skoX (+ (* skoW (/ 1. 6.)) (* skoX (/ 1. 12.))))) (* skoY (+ (+ (* skoW (/ 1. 24.)) (* skoX (/ 1. 24.))) (* skoY (/ 1. 120.))))))))))))) (and (not (<= 3. skoW)) (and (not (<= 3. skoX)) (and (not (<= 3. skoY)) (and (not (<= 3. skoZ)) (and (not (<= skoW (/ 1. 10.))) (and (not (<= skoX (/ 1. 10.))) (and (not (<= skoY (/ 1. 10.))) (not (<= skoZ (/ 1. 10.))))))))))))
(set-info :status unsat)
(check-sat)
