//////////////////////////////////////////////////////////////////////////////
//   Package:          CAPD

// ///////////////////////////////////////////////////////////////////////////
/// @file compilation.dox
/// @brief Documentation on how to compile  CAPD package
///
/// @author Tomasz Kapela   @date 2009-12-17
// ///////////////////////////////////////////////////////////////////////////

// Copyright (C) Tomasz Kapela 2009
//
// This file constitutes a part of the CAPD library,
// distributed under the terms of the GNU General Public License.
// Consult  http://capd.ii.uj.edu.pl/ for details.


/*! \page readme_file The CAPD library - readme file

This document is divided into the following sections:
- \ref compilation_system_requirements
- \ref compilation_compilation_instructions
- \ref compilation_directory_layout
- \ref compilation_library_modules Library Modules
- \ref compilation_make_files Make Files
- \ref compilation_configuration_files Configuration Files
- Programs that Use the Library
- How to Compile a Program that Uses the Library

The initial version of this document was prepared by Pawel Pilarczyk on April 3-4, 2005.

Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License.

\section compilation_system_requirements System Requirements

The system configurations for which the CAPD library is being developped, but not on all well tested, are listed below.

- hardware platforms:
  - PC with any Pentium-compatible processor
  - SUN Sparc station
- operating systems:
  - virtually any flavor of Linux/Unix
  - Windows 95 or newer
- compilers:
  - GNU C++ 3.4.x or newer, including the MinGW port for Windows

Additional software needed:
- GNU Make
- in Windows:
  - Perl (only necessary in Windows - this is a temporary solution)
- in Linux:
  - graphic library header files (by default not installed in most distributions) e.g. package X11-devel

The system configurations in which the CAPD library is being developed, and therefore properly tested, are as follows:
- SONY VAIO S460/B notebook with the Intel processor, Windows XP Home Edition, wxDev-Cpp (including MinGW GNU C++ 3.4.2 and wxWidgets 2.6), GNU Make 3.77, Active Perl 5.8.7
- Ubuntu Linux 9.10 32-bit, Intel processor, Dell latitude E4300

Some other systems not mentioned above may also be supported without notice.

\section compilation_compilation_instructions Compilation Instructions

In order to compile the CAPD library, one can follow the steps listed below:
-# Make sure the system configuration satisfies the system requirements listed above.
-# Download the most recent version of the CAPD library source code distribution
   from the CAPD website at <a href="http://capd.ii.uj.edu.pl" target="top">capd.ii.uj.edu.pl</a>.
-# Unpack the downloaded file into an empty directory.<br>
   In Linux/Unix make sure the files are unpacked in the text mode, e.g., <tt>unzip -a capd_src.zip</tt>
-# Enter the \p make subdirectory of the CAPD package.
-# Type <code>make target=TARGET</code>, where <tt>TARGET</tt> is the name of one of the configuration files
   in the config subdirectory (these files are described in details in the section \ref compilation_configuration_files ).

Note: On some systems one must type gmake instead of make in order to run GNU make.

Since the number of library modules and related programs is quite large, be prepared for the compilation to take several minutes.

\section compilation_directory_layout Directory Layout

The files contained in the source code distribution of the CAPD library are split among the following subdirectories:
- \b include - header files, grouped in subdirectories by module
- \b src - source code, grouped in subdirectories by module
- \b doc - output directory for doxygen generated documentation
- \b examples - example programs which illustrate how to use the library; each group of programs is contained in a separate subdirectory
- \b programs - utility programs to be compiled with the library; they allow one to use some of the library features without the need to write programs oneself
- \b tests - test programs which verify the library for errors; mainly used by the developers
- \b unitTests - unit tests for the library (under development)
- \b utils - various utility files that support the development and compilation of the library
- \b make - makefiles and supporting files for the automatic compilation of the library and programs based on it
- \b bin - compiled binary programs; initially empty
- \b lib - compiled libraries; initially empty
- \b obj - compiled object files; initially empty
- \b private - user's programs that use the library; not included in the source code distribution

If any of the directories bin, lib, obj do not exist, they are created automatically. Note that the compiled library source files
are placed in subdirectories of the obj directory (these subdirectories are also created automatically if necessary).

<b>Important note</b>: Since all the object files of the programs are stored in one directory,
their names must be mutually different, even if they belong to different programs linked with the library.
You can define in variable <tt>SUBDIR</tt> in programs group makefile where to store object files.


\em Hint: It is possible to change the location where the results of compilation are stored.
For this purpose it is enough to add the definitions of the <tt>BIN=</tt>, <tt>LIB=</tt> and <tt>OBJ=</tt> variables
in the configuration file(s) found in the \i config subdirectory.
See <i>make/makedirs</i> for the default values of these variables.



\section compilation_library_modules Library Modules

The source code of the CAPD library is grouped into modules which contain sets of header files and other source code files.
<b>Each module</b> has its own subdirectory in the <tt>src/capd</tt> directory and <b>the name of this subdirectory is the name of the module</b>.
All the <tt>cpp</tt> files contained there are compiled into the corresponding module library called <tt>libcapdmodule</tt>
and all the <tt>cpp</tt> files from all the modules are also gathered in the library file <tt>libcapd</tt>.
The <i>header files</i> of the module are located in the module's subdirectory of the <tt>include/capd</tt> directory.

The following modules are currently available in the CAPD library:
- krak - a simple to use graphics user interface
- interval - rigorous interval arithmetic
- vectalg - vector algebra routines
- map - maps and their derivatives
- dynsys - dynamical systems
- dynset - sets in the phase space of a dynamical system
- covrel - covering relations and h-sets
- homology - homology computation and related procedures

Some other sub-packages of source code consist only of header files, and therefore they don't form library packages.
They can be used in one's programs by #including appropriate header files.
These packages are:
- capd - common basic header files, mainly configuration or utility functions
- poincare - Poincar√© map computation routines

Note that the above list of modules may change without notice, as the CAPD library is in continuous development.



\section compilation_make_files Make Files

The following files, all located in the make directory, are used to automatically compile the CAPD library and dependent programs:

- \b makefile - defines what to compile and how to make documentation and install library
- \b makecfg - sets various defaults: target configuration, library name
- \b makedirs - defines various directories relatively to HOME
- \b makemain - defines how to compile one library module
- \b makeprog - defines how to compile one set of programs which use the library
- \b config/* - system-dependent configurations
- \b auto_dep/* - automatically generated file dependencies for library modules

Instead of compiling the entire CAPD library with all the programs by invoking
<code> make all </code>
one can call make with arguments listed below for selective compilation,
or other actions related to the compiled files:

- \b library - compile the CAPD library (default)
- \b directories - creates various directories i.e. bin, lib, obj
- \b module_name - compile the selected module library
- \b program_group - compile and link the selected program group.
     The program_group is the name of the directory containing program group
     relative to main capd directory i.e. examples/krakdemo
- \b objects - compile all the object files from all the library modules and also create module libraries
- \b examples - compile and link all the programs located in the examples directory
- \b tests - compile and link all the programs located in the tests directory
- \b programs - compile and link all the programs located in the programs directory
- \b private - compile and link all the programs located in the private directory
- \b all - all the above
- \b mpcapdlib - compile the MPCAPD library - a version of the CAPD library that uses multiple precision floating points instead of doubles.
- \b cleandeps - delete all the automatically generated dependency files
- \b cleanobj - delete all the object files
- \b cleanlib - delete all the library files
- \b cleanexe - delete all the executable files
- \b clean - both cleanobj and cleanlib
- \b purge - cleanobj, cleanlib and cleanexe

Since different target systems may imply different extensions of object files or executable files,
the option target=TARGET must be used each time, even with arguments like clean.
Most of the files in the make directory are well commented.
Reading them may give insight into more configuration possibilities.



\section compilation_configuration_files Configuration Files

Configuration files in the make/config directory define various system-dependent aspects of compilation.
The following files are supplied in the CAPD source code distribution:

- \b X11, \b unx - GNU C++ on a typical Linux/Unix with the X11 graphics library
- \b X11-gmp - a modification of X11 that uses the multi-precision interval arithmetic
     (requires the GMP and MPFR libraries, normally available in most Linux distributions)
- \b mac - a modification of the unx configuration file for Mac
- \b gcc336 - a modification of the unx configuration file to be used for GNU C++ 3.3.6
     (should also work fine for the older GNU C++ compilers that do not have -frounding-math option)
- \b win - MinGW GNU C++ in Windows
- \b bcc - Borland C++ Builder X in Windows (no longer supported due to problems with templates)
- \b wxDLL, wxMSW - GNU C++ in Windows with the wxWidgets GUI library compiled as DLLs or linked statically
- \b wxDEV - GNU C++ in Windows with the wxWidgets library, as configured in the wxDEV-C++ package
- \b wx - GNU C++ in Linux with the wxWidgets library
- \b dev4980 - MinGW GNU C++ in Windows, as packaged in the Dev-C++ 4.9.8.0 distribution (deprecated)

The variables defined in each configuration file contained in the make/config directory are described below. Some example settings are quoted in parentheses for clarity.

- \b COMPILE - the command used to compile the .cpp source code files (g++ -O2 -ansi -pedantic -Wall)
- \b LINK - the command to link console programs (g++ -s)
- \b LINKGUI - the command to link GUI programs (g++ -mwindows -s)
- \b MAKELIB - the command to create a library file from object files (ar cru)
- \b IDXLIB - the command to add an index to a library (ranlib)
- \b REMOVE - the command to delete files (rm)
- \b SYSLIB - system libraries to link console applications with (-lwsock32 or -lpthread)
- \b SYSLIBG - system libraries to link GUI applications with (-L/usr/X11R6/lib/ -lX11 -lGL -lXpm -lpthread)
- \b SYSINCL - switches to include all the necessary header files (-Ic:/dev-cpp/include)
- \b EXE - the extension of the executable programs (.exe)
- \b LIBEXT - the extension of the library files (.a or .lib)
- \b OBJEXT - the extension of the object files (.o or .obj)

Please, consult the configuration files supplied with the CAPD library for more information.



\section compile_programs_that_use_the_library Programs that Use the Library

Groups of programs that use the CAPD library are located in one of the followind directories: examples, tests, programs, private.
The latter directory is not included in the source code distribution,
because it is supposed to keep the user's own programs which must be compiled with the CAPD library.

Each group of programs is gathered in a subdirectory of one of the directories mentioned above and is supplied with makefile.
This file defines the following variables (space-separated lists):

- \b PROGS - cpp files to be compiled as programs
- \b OTHERS - cpp files which give rise to object files to be linked with the programs
- \b LIBRARY - the CAPD module libraries with which the programs should be linked
     (the entire CAPD library is used if this list is empty) e.g. <br>
     <tt>LIBRARY = capdkrak capdinterval</tt>
- \b GUI - defined as 0 if the programs are console applications or 1 if they are GUI applications

The following variables can additionally be defined in makefile to override or modify the settings assumed in make/makeprog and make/makedirs:
- \b SRC - the directory in which the source files of the program group are located if different from the program group's directory
- \b INC - directories that should be added to the search path for header files instead of the program group's directory
- \b OBJ - the directory to put the object files in
- \b BIN - the directory to save the binary (executable) programs to

The last line in each makefile includes the file make/makeprog from the main CAPD directory.
Since the directory include alone is added to the compiler's search path for #include'd files,
in the source code of the programs it is necessary to specify each module subdirectory explicitly.

The successful compilation of each progarm group requires that the corresponding libraries are compiled first.
Moreover, the file makedeps is also necessary;
it is generated and updated automatically by the program filedeps
and it is silently skipped if the program bin/filedeps does not exist.
The source code of the filedeps program with a corresponding makefile
is contained in the utils/filedeps directory of the CAPD source code distribution
and may be compiled by simply invoking the make command in that directory.

 *
 */
