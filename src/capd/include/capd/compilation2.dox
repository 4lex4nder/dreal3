/*!
 * \page basic_compilation Typical compilation and other tasks


\section compilation2_system_configuration System configuration

The first thing to set up is the <tt>system_configuration</tt>.  It defines system dependent variables.
Typical configurations are
- <tt>win</tt> - Windows with MinGW GNU compiler
- <tt>X11</tt> - Linux with the X11 graphics library

See \ref compilation2_available_targets "list of all available targets".

\section compilation2_common_tasks Typical tasks

You can invoke the following most common commands standing in the root directory of CAPD package,
but preferred way is to invoke them from the <tt>make</tt> directory.

<h4>Build the CAPD library</h4>
<pre>
 make capdlib target=system_configuration
</pre>
Compiled libraries are placed in the <tt>lib</tt> directory.
<h4>Build the CAPD library and all programs that come with library</h4>
<pre>
  make all tartget=system_configuration
</pre>
Built programs (examples, programs and tests) are placed in the <tt>bin</tt> directory

<h4>Build version of the CAPD library based on multiple precision floating point numbers</h4>
<pre>
  make mpcapdlib target=system_configuration
</pre>
Library <tt>libmpcapd</tt> will be placed in the <tt>lib</tt> directory.

<h4>Install the CAPD package.</h4>
<pre>
  make install target=system_configuration [prefix=/path/where/to/install]
</pre>
It copies header files and compiled libraries to a given directory (prefix/include and prefix/lib correspondingly).

<h4>Generate documentation</h4>
<pre>
  make doc
</pre>
It assumes that Doxygen is already installed. The generated documentation is placed in the <tt>doc/html</tt> directory.

<h4>Remove binary files</h4>
<pre>
  make purge
</pre>
It removes all effects of the <tt>make all</tt> compilation i.e. objects files, libraries, executable programs.
<h4>Remove only objects files and libraries</h4>
<pre>
  make clean
</pre>
To remove binary files of library other than <tt>capd</tt>  i.e. <tt>mpcapd</tt> invoke
<pre>
  make clean libname=mpcapd
</pre>

*/

/*!
 * \page advanced_compilation Advanced options and task

The main ingredients of automatic compilation system are:
- standard <b>GCC make</b>,
- <b>filedeps</b> program that automatically generates files dependencies,
- set of general rules defined in <tt>make</tt> directory how to compile, build etc.,
- system dependent configuration files stored in the <tt>make/config</tt> directory.


General command has the following form (parts in brackets are optional)
<pre>
make task [target=system_configuration]  [options]
</pre>
It performs given task using given \ref compilation2_available_targets "system configuration". If \ref compilation2_options "option" is not specified
then default value defined in the <tt>make/makecfg</tt> file are used.

Conventions:
- each subdirectory  of \p src directory is a separate library (subdirectory name denote a \i library_name)
- each subdirectory of <tt>src/library_name</tt> is a name of a library \b module
- module consists of all .cpp files in the directory <tt>src/library_name/module_name</tt>
- library consist of .cpp files of her modules

\section compilation2_tasks Tasks

A list of all available task:
- \b capdlib - compile the CAPD library (default)
- \b objects - compile all the object files from all library modules and also create module libraries
- \b examples - compile and link all the programs located in the examples directory
- \b tests - compile and link all the programs located in the tests directory
- \b programs - compile and link all the programs located in the programs directory
- \b private - compile and link all the programs located in the private directory
- \b directories - create needed directories e.g. lib, bin, obj
- \b all - all the above
- \b mpcapdlib - compile the MPCAPD library - a version of the CAPD library that uses multiple precision floating points instead of doubles.
- \b module_name - compile the selected module library
- \b program_group - compile and link the selected program group e.g. program_group=examples/krakdemo
- \b cleandeps - delete all the automatically generated dependency files
- \b cleanobj - delete all the object files
- \b cleanlib - delete all the library files
- \b cleanexe - delete all the executable files
- \b clean - both cleanobj and cleanlib
- \b purge - cleanobj, cleanlib and cleanexe

\section compilation2_available_targets Available targets (system configurations)

The <tt>system_configuration</tt>
files in the make/config directory define various system-dependent aspects of compilation.
The following files are supplied in the CAPD source code distribution:

- \b X11, \b unx - GNU C++ on a typical Linux/Unix with the X11 graphics library
- \b X11-gmp - a modification of X11 that uses the multi-precision interval arithmetic
     (requires the GMP and MPFR libraries, normally available in most Linux distributions)
- \b mac - a modification of the unx configuration file for Mac
- \b gcc336 - a modification of the unx configuration file to be used for GNU C++ 3.3.6
     (should also work fine for the older GNU C++ compilers that do not have -frounding-math option)
- \b win - MinGW GNU C++ in Windows
- \b bcc - Borland C++ Builder X in Windows (no longer supported due to problems with templates)
- \b wxDLL, wxMSW - GNU C++ in Windows with the wxWidgets GUI library compiled as DLLs or linked statically
- \b wxDEV - GNU C++ in Windows with the wxWidgets library, as configured in the wxDEV-C++ package
- \b wx - GNU C++ in Linux with the wxWidgets library
- \b dev4980 - MinGW GNU C++ in Windows, as packaged in the Dev-C++ 4.9.8.0 distribution (deprecated)

The variables defined in each configuration file contained in the make/config directory are described below. Some example settings are quoted in parentheses for clarity.

- \b COMPILE - the command used to compile the .cpp source code files (g++ -O2 -ansi -pedantic -Wall)
- \b LINK - the command to link console programs (g++ -s)
- \b LINKGUI - the command to link GUI programs (g++ -mwindows -s)
- \b MAKELIB - the command to create a library file from object files (ar cru)
- \b IDXLIB - the command to add an index to a library (ranlib)
- \b REMOVE - the command to delete files (rm)
- \b SYSLIB - system libraries to link console applications with (-lwsock32 or -lpthread)
- \b SYSLIBG - system libraries to link GUI applications with (-L/usr/X11R6/lib/ -lX11 -lGL -lXpm -lpthread)
- \b SYSINCL - switches to include all the necessary header files (-Ic:/dev-cpp/include)
- \b EXE - the extension of the executable programs (.exe)
- \b LIBEXT - the extension of the library files (.a or .lib)
- \b OBJEXT - the extension of the object files (.o or .obj)

Please, consult the configuration files supplied with the CAPD library for more information.

\section compilation2_options Options

Options:
- \b libname - current library name e.g capd (default), mpcapd. You have to specify it e.g.
  if you want to compile selected module of non-default library
- \b gui - it turns on(gui=1)/off(gui=1) Graphical User Interface:
  - for the CAPD library <tt>gui=0</tt> excludes <tt>krak</tt> module from the library,
  - for program group <tt>gui=0</tt> produces console application,
- \b multiprecision - multiprecision=1 denotes that library or program uses multiple precision.<br>
  It defines <tt>__HAVE_MPFR__</tt> symbol during compilation and links programs with gmp and mpfr library.

\section compilation2_library Kompilacja biblioteki

biblioteka jest kompilowana do biblioteki o nazwie libbiblioteka
kompilacja biblioteki wykona następujące reguły
- directories - utworzy (jeśli nie istnieją) katalogi obj, bin, lib, obj/biblioteka
- library - wykonuje
  - objects - kompiluje wszystkie moduły biblioteki (co utworzy dla każdego pliku .cpp odpowiadający plik obiektowy).
  - utworzy plik biblioteki z wszystkich plików obiektowych oraz dodaje odpowiedni indeks.

Bibliotekę możemy skompilować poleceniem
<pre>
make [bibliotekalib] [target=X11] [multiprecision=0] [gui=1]
</pre>
lub
<pre>
make  [target=system] [libname=capd] [multiprecision=0] [gui=1]
</pre>
Domyślnie
- bibliotekalib=capdlib
- target=X11 - określa plik konfiguracyjny w katalogu make/config zawierający definicje specyficzne dla danego systemu operacyjnego
- multiprecision=0 - parametr multiprecision decyduje czy obsluga liczb duzej precyzji jest włączona.

Polecenie
<pre>
make  [target=system] [libname=biblioteka] [multiprecision=1]
</pre>

\section compilation2_module Kompilacja modułu biblioteki

W obecnie każdy podkatalog w katalogu src oznacza oddzielną bibliotekę (nazwa katalogu jest nazwą biblioteki).
Dla modułu przyjęto następujące ustawienia:
- pliki obiektowe .o są umieszczane w katalogu obj/biblioteka/modul
- moduł jest kompilowany do biblioteki o nazwie libbibliotekamodul.a
- polecenia jak skompilować moduł i stworzyć zawierającą go bibliotekę są zebrane w pliku make/makemain

Wybrany moduł można kompilować poleceniem
<pre>
make moduł [libname=biblioteka] [target=system] [multiprecision=1]
</pre>
Domyślnie
- libname=capd
- target=X11
- multiprecision=0 - parametr multiprecision decyduje czy obsluga liczb duzej precyzji jest włączona.

Powyższe polecenie wykona
<pre>
make -f makemain module=moduł target=system [libname=biblioteka] [multiprecision=1]
</pre>

\section compilation2_changes Zmiany w stosunku od poprzedniej wersji

Wartosci domyślne sa tak dobrane ze wiekszosc komend i ustawień pozostaje bez zmian. Dokonalem jednak pewnych, które nie są wstecz kompatybilne zmian oto ich lista:

- w makefile w grupach programów w zmiennej LIBRARY aby linkowac z wybranymi bibliotekami a nie domyslna biblioteka capd nalezy nie sama nazwe modulu ale faktyczna nazwe biblioteki. Zamiast
LIBRARY=krak vectalg
nalezy napisac
LIBRARY = capdkrak capdvectalg

-chcąc skompilować wybraną grupę programów znajdującą sie np. w capd/examples/alglibdemo zamiast
make alglibdemo
należy wywołać
make examples/alglibdemo

 */
