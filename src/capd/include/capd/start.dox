
/** \page getting_started Getting started
 *
Here we describe how to compile and use the CAPD library.

\section getting_started_step_by_step Step by step tutorials

If you want to use CAPD library for the first time then most probably you will find useful:
- \subpage getting_started_windows_dev "Windows with DEV-C++"
- \subpage getting_started_linux "Linux with GNU compiler g++"

<i> We describe several there possible procedures to compile the CAPD library and write your first program that uses CAPD.
Although the library is developed to be system independent, there are differences in the compilation process under specific operating systems
e.g. installed software requirements, a type of a compiler and its options.</i>

\section getting_started_compilation CAPD building system

We describe here in details the building system of the CAPD library. Its primary task is to compile and build the CAPD library,
but it can also install library, generate documentation, compile user programs in an automatic way.

- \subpage basic_compilation
- \subpage advanced_compilation
- \subpage readme_file .


 */


/**
 * \page getting_started_windows_dev CAPD under Windows with DEV-C++

 <h2>How to compile, install and use the CAPD library under Windows with DEV-C++</h2>

In this tutorial I do not try to explain each possibility, I just describe the way I compile and use the CAPD library.
Under windows I am using GNU compiler g++ which comes with Dev-C++ package.

The basic steps are:
- \ref windows_requirements
  - \ref w_req_1
  - \ref w_req_2
  - \ref w_req_3
- \ref windows_compile
  - \ref win_comp_1
  - \ref win_comp_2
  - \ref win_comp_4
- \ref  windows_using_the_capd_library
  - \ref win_using_dev_cpp
  - \ref win_using_acs


<i> I hope that following this simple procedure everybody can make his own version of CAPD library working.
If you have any question or you get stuck during compilation process please let me know I will try to help you.
My email address is (kapela at ii . uj . edu . pl ).
In email please attach informations like compilator logs, error messages etc. </i>



\section windows_requirements Requirements

\subsection w_req_1 Install Dev-C++

Download <a href="http://www.bloodshed.net/dev/devcpp.html">Dev-C++ 5.0 with Mingw/GCC</a> and install it.

I use default installation directory C:\\DEV-CPP.
If you choose another directory then you need to make appropriate changes in the next steps.

\subsection w_req_2 Install Active Perl

Download <a href="http://www.activestate.com/Products/activeperl/index.mhtml">Active Perl Standard Distribution </a> and install it.

Again I choose default installation directory C:\\Perl

<i>Perl is a temporary tool for the CAPD.
It is mainly used to change paths from Linux standard (e.g…/../bin/taylor.exe) into Windows standard (..\\..\\bin\\tayor.exe).
In fact the CAPD library downloaded from our website should compile without Perl
but you will go into trouble when you order to clean object files or create directory.
So I highly recommend to install Perl on your computer.
</i>

\subsection w_req_3 Add to PATH variable directories that contains g++, make and perl

You need to add directories <tt>C:\\dev-cpp\\bin</tt> and <tt>C:\\Perl\\bin</tt> to the system variable \b PATH.
It is needed to write shortly \e g++ instead of \e C:\\dev-cpp\\bin\g++.

<b>On Windows XP:</b>
- Go to <b>My Computer->Properties</b> and on \b Advanced tab choose <b>Environment variables</b>.
- Then in system variables find and edit Path variable.
  Add <tt>C:\\dev-cpp\\bin;</tt> to be first directory on a path (semicolon is used to separate directories).
- Check if <tt>C:\\perl\\bin</tt> is already present, if not add also this directory.

If you have no rights to add anything to system variables you can add to local user variable also named Path.

\section windows_compile  Library compilation

\subsection win_comp_1 Download CAPD package and unpack it

Download the most recent version of the CAPD library source code distribution from the CAPD website at <a href="capd.ii.uj.edu.pl">capd.ii.uj.edu.pl</a>

Unpack the downloaded file into an empty directory (I will call it \b CAPD_DIR, for example let CAPD_DIR=E:\\capd).

<i>To unpack archive simply double click on it to enter it and then copy and paste all files into empty directory.</i>

\subsection win_comp_2 Compile CAPD package

Run terminal ( <i>Start->Run… : cmd </i>)

Change directory to \b CAPD_DIR and run <tt>make target=win</tt> command
\code
E:
cd capd
make target=win
\endcode
Be patient, it can take some time depending on your computer configuration.

There are many additional parameters that can be passed to make.
They are explained in details in the \ref advanced_compilation "advanced compitation manal"
and the readme file which comes with CAPD package.

\subsection win_comp_3 Common errors:
\code
Name 'make'/'g++' is not recognized as internal or external command,…
\endcode
Type <tt>path</tt> on terminal and check that PATH contains C:\\dev-cpp\\bin directory if not go to \ref  w_req_3 "Requirements 3."


\subsection win_comp_4 Install CAPD package into Dev-C++

This step is optional but is useful if you want to write, compile and run your code using Dev-C++ environment.

Once the CAPD library has been successfully compiled, one can install it by copying
the contents of the <tt>CAPD_DIR\\include</tt> directory to the <tt>C:\dev-cpp\\include</tt> directory,
and the contents of the <tt>CAPD_DIR\\lib</tt> to <tt>C:\\dev-cpp\\lib</tt>.

\section windows_using_the_capd_library Using the CAPD library

To write and compile your own program that uses CAPD library it is good to start
by reading and modifying examples which are contained in the example directory.

To compile all examples you should in the directory <tt>make</tt> invoke a command
\code
make target=win examples
\endcode
After successful compilation executables are stored in the bin directory.

\subsection win_using_dev_cpp Dev-C++ environment

To use the Dev-C++ environment it is recommended to install compiled CAPD package as it was described in the previous steps.
- Create new project (choose between console aplication or GUI aplication.
  It also can be changed later in Project Options)
- Open Project→Project Options and on the Paremeters tab add to the Linker options:
\code
  -l capd
\endcode
- Create new source file or add to project existing one.<br>
To test your settings you can add file <tt>CAPD_DIR\\=examples\\taylor\\tayltst.cpp</tt>.
In this case you have to choose Windows GUI Application.
- \b Compile (Ctrl+F9) and \b Run (Ctrl+F10) your project (this commands can be found in the Execute menu)

\subsection win_using_acs Automated compilation system from CAPD library

To write my own programs I found it really convenient to use automated compilation system that is built in the CAPD library.

*/
