// Generated by CoffeeScript 1.6.2
(function() {
  var Chart, addTimeToData, color, contextHeight, contextWidth, createChart, height, margin, processJson, showOnly, svg, width;

  color = d3.scale.category10();

  showOnly = function(chart, b) {
    chart.xScale.domain(b);
    chart.chartContainer.selectAll("rect").data(chart.modes).attr("x", function(d) {
      return chart.xScale(d[0]) + .5;
    }).attr("width", function(d) {
      return chart.xScale(d[1]) - chart.xScale(d[0]) - .5;
    });
    chart.chartContainer.selectAll("line").data(chart.modes).attr("x1", function(d) {
      return chart.xScale(d[0]) + .5;
    }).attr("x2", function(d) {
      return chart.xScale(d[0]) + .5;
    });
    chart.chartContainer.select("path.chart").data([chart.chartData]).attr("d", chart.area);
    chart.chartContainer.select("path.line").data([chart.chartData]).attr("d", chart.line);
    chart.chartContainer.select(".x.axis.top").call(chart.xAxisTop);
    return chart.chartContainer.select(".x.axis.bottom").call(chart.xAxisBottom);
  };

  addTimeToData = function(t, item) {
    item.values = item.values.map(function(data) {
      var ret;

      ret = {};
      ret.time = [+data.time[0] + t[1], +data.time[1] + t[1]];
      ret.enclosure = data.enclosure;
      return ret;
    });
    return item;
  };

  processJson = function(json) {
    var data, groups, items, k, lastTime, result, traces;

    groups = json.groups;
    json.traces = _.rest(json.traces);
    traces = _.filter(json.traces, function(item) {
      return _.some(groups, function(g) {
        return (+item[0].group) === g;
      });
    });
    result = [];
    traces.forEach(function(items) {
      return items.forEach(function(item) {
        var k, key_strings, s;

        key_strings = item.key.split("_");
        item.mode = _.last(key_strings);
        key_strings = _.initial(key_strings);
        s = item.step = _.last(key_strings);
        key_strings = _.initial(key_strings);
        k = item.key = key_strings.join("_");
        if (!(k in result)) {
          result[k] = new Array();
        }
        if (!(s in result[k])) {
          result[k][s] = new Array();
        }
        return result[k][s] = item;
      });
    });
    lastTime = [];
    for (k in result) {
      items = result[k];
      _.each(items, function(item) {
        if (!(k in lastTime)) {
          lastTime[k] = [0.0, 0.0];
        }
        item = addTimeToData(lastTime[k], item);
        lastTime[k] = _.last(item.values).time;
        return item.domX = [
          d3.min(item.values, function(p) {
            return p.time[0];
          }), d3.max(item.values, function(p) {
            return p.time[1];
          })
        ];
      });
      items.domX = [
        d3.min(items, function(item) {
          return item.domX[0];
        }), d3.max(items, function(item) {
          return item.domX[1];
        })
      ];
      items.domY = [
        d3.min(items, function(item) {
          return d3.min(item.values, function(p) {
            return p.enclosure[0];
          });
        }), d3.max(items, function(item) {
          return d3.max(item.values, function(p) {
            return p.enclosure[1];
          });
        })
      ];
    }
    data = {};
    data.title = json.title;
    data.values = _.values(result);
    data.domX = [
      d3.min(data.values, function(k) {
        return k.domX[0];
      }), d3.max(data.values, function(k) {
        return k.domX[1];
      })
    ];
    data.domY = [
      d3.min(data.values, function(k) {
        return k.domY[0];
      }), d3.max(data.values, function(k) {
        return k.domY[1];
      })
    ];
    return data;
  };

  createChart = function(json) {
    var brush, chartHeight, charts, context, contextArea, contextAxis, contextLine, contextXScale, contextYScale, data, keys, onBrush;

    data = processJson(json);
    console.log("Data:", data);
    charts = [];
    keys = data.length;
    chartHeight = height * (1 / keys);
    contextXScale = d3.scale.linear().range([0, contextWidth]).domain(data.domX);
    contextYScale = d3.scale.linear().range([contextHeight, 0]).domain(data.domY);
    contextAxis = d3.svg.axis().scale(contextXScale).tickSize(contextHeight).tickPadding(-10).orient("bottom");
    contextArea = d3.svg.area().interpolate("monotone").x0(function(p) {
      return contextXScale(p.time[0]);
    }).x1(function(p) {
      return contextXScale(p.time[1]);
    }).y0(function(p) {
      return contextYScale(p.enclosure[0]);
    }).y1(function(p) {
      return contextYScale(p.enclosure[1]);
    });
    contextLine = d3.svg.line().interpolate("monotone").x(function(p) {
      return contextXScale((p.time[0] + p.time[1]) / 2);
    }).y(function(p) {
      return contextYScale((p.enclosure[0] + p.enclosure[1]) / 2);
    });
    context = svg.append("g").attr("class", "context").attr("transform", "translate(" + (0 + margin.left) + "," + (chartHeight * keys + margin.top + margin.bottom) + ")");
    context.append("g").attr("class", "x axis top").attr("transform", "translate(0,0)").call(contextAxis);
    _.each(data.values, function(data, i) {
      return charts.push(new Chart({
        data: data,
        id: i,
        name: data.key,
        width: width,
        height: height * (1 / keys),
        domainX: data.domainX,
        svg: svg,
        margin: margin,
        context: context,
        contextArea: contextArea,
        contextLine: contextLine
      }));
    });
    context.append("text").attr("class", "instructions").attr("transform", "translate(0," + (contextHeight + 20) + ")").text('Click and drag above to zoom / pan the data');
    onBrush = function() {
      var b, i, _i, _results;

      b = brush.empty() ? contextXScale.domain() : brush.extent();
      _results = [];
      for (i = _i = 0; _i < keys; i = _i += 1) {
        _results.push(showOnly(charts[i], b));
      }
      return _results;
    };
    brush = d3.svg.brush().x(contextXScale).on("brush", onBrush);
    return context.append("g").attr("class", "x brush").call(brush).selectAll("rect").attr("y", 0).attr("height", contextHeight);
  };

  Chart = (function() {
    function Chart(data) {
      var maxY, minY, xS, yS;

      this.chartData = data.data;
      this.width = data.width;
      this.height = data.height;
      this.domX = data.domX;
      this.modes = data.modes;
      this.svg = data.svg;
      this.id = data.id;
      this.name = data.name;
      this.margin = data.margin;
      console.log("ChartData: ", this.chartData);
      this.xScale = d3.scale.linear().range([0, this.width]).domain(data.domX);
      minY = d3.min(this.chartData, function(p) {
        return p.enclosure[0];
      });
      maxY = d3.max(this.chartData, function(p) {
        return p.enclosure[1];
      });
      this.yScale = d3.scale.linear().range([this.height, 0]).domain(data.domY);
      xS = this.xScale;
      yS = this.yScale;
      this.line = d3.svg.line().interpolate("basis").x(function(p) {
        return xS((p.time[0] + p.time[1]) / 2);
      }).y(function(p) {
        return yS((p.enclosure[0] + p.enclosure[1]) / 2);
      });
      this.area = d3.svg.area().interpolate("basis").x0(function(p) {
        return xS(p.time[0]);
      }).x1(function(p) {
        return xS(p.time[1]);
      }).y0(function(p) {
        return yS(p.enclosure[0]);
      }).y1(function(p) {
        return yS(p.enclosure[1]);
      });
      this.svg.append("defs").append("clipPath").attr("id", "clip-" + this.id).append("rect").attr("width", this.width).attr("height", this.height);
      this.chartContainer = svg.append("g").attr('class', this.name.toLowerCase()).attr("transform", "translate(" + this.margin.left + "," + (this.margin.top + (this.height * this.id) + (20 * this.id)) + ")");
      this.chartContainer.selectAll("rect").data(this.chartData).enter().append("svg:rect").attr("x", function(d) {
        return xS(d[0]) + .5;
      }).attr("y", 0).attr("height", this.height).attr("width", function(d) {
        return xS(d[1]) - xS(d[0]) - .5;
      }).attr("fill", color(this.name)).style("fill-opacity", 0.1).attr("clip-path", "url(#clip-" + this.id + ")");
      this.chartContainer.selectAll("line").data(this.modes).enter().append("svg:line").attr("x1", function(d) {
        return xS(d[1]) + .5;
      }).attr("x2", function(d) {
        return xS(d[1]) + .5;
      }).attr("y1", 0).attr("y2", this.height).style("stroke", "#999999").style("stroke-width", "0.5px").attr("clip-path", "url(#clip-" + this.id + ")");
      this.chartContainer.append("path").data([this.chartData]).attr("class", "chart").attr("clip-path", "url(#clip-" + this.id + ")").attr("d", this.area).style("fill", color(this.name)).style("fill-opacity", 0.8);
      this.chartContainer.append("path").data([this.chartData]).attr("class", "line").attr("clip-path", "url(#clip-" + this.id + ")").attr("d", this.line).style("stroke", color(this.name)).style("stroke-width", "2px").style("fill-opacity", 0.0);
      data.context.append("path").data([this.chartData]).attr("class", "chart").attr("d", data.contextArea).style("fill", "black").style("fill-opacity", 0.1);
      data.context.append("path").data([this.chartData]).attr("d", data.contextLine).style("stroke", color(this.name)).style("stroke-width", "2px").style("fill-opacity", 0.0);
      this.xAxisTop = d3.svg.axis().scale(this.xScale).orient("bottom");
      this.xAxisBottom = d3.svg.axis().scale(this.xScale).orient("bottom");
      this.chartContainer.append("g").attr("class", "x axis bottom").attr("transform", "translate(0," + this.height + ")").call(this.xAxisBottom);
      this.yAxis = d3.svg.axis().scale(this.yScale).orient("left").ticks(5);
      this.chartContainer.append("g").attr("class", "y axis").attr("transform", "translate(0,0)").call(this.yAxis);
      this.chartContainer.append("text").attr("class", "country-title").attr("transform", "translate(15,40)").text(this.name);
    }

    return Chart;

  })();

  margin = {
    top: 10,
    right: 40,
    bottom: 100,
    left: 60
  };

  width = 940 - margin.left - margin.right;

  height = 500 - margin.top - margin.bottom;

  contextHeight = 50;

  contextWidth = width;

  svg = d3.select("#chart-container").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom + 200);

  d3.json('data.json', createChart);

}).call(this);
